{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\Calender\\\\calender.js\",\n  _s = $RefreshSig$();\n// import {\n//   Wrapper,\n//   CalenderHead,\n//   SevenColGrid,\n//   HeadDay,\n//   CalenderBody,\n//   StyledDay,\n//   StyledEvent\n// } from './styled'\n// import 'bootstrap/dist/css/bootstrap.min.css'\n// import * as Icon from 'react-bootstrap-icons'\n// import { Days, MONTHS } from './const'\n// import {\n//   range,\n//   getDaysInMonth,\n//   getSortedDays,\n//   areDatesTheSame,\n//   getDateobj\n// } from './util'\n// import { useState, useEffect } from 'react'\n// import { EventModal } from './addEventModal/addEventModal'\n// import './addEventModal/addEventModal.css'\n\n// export const Calender = ({\n//   startingDate,\n//   eventsArr,\n//   addEvent,\n//   editEvent,\n//   removeEvent\n// }) => {\n//   const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth())\n//   const [currentYear, setCurrentYear] = useState(startingDate.getFullYear())\n//   const DaysInMonth = getDaysInMonth(currentMonth, currentYear)\n//   const [selectedDay, setSelectedDay] = useState(new Date().getDay())\n//   const [selectedEvent, setSelectedEvent] = useState(null)\n//   const [eventForm, setEventForm] = useState({})\n\n//   const [showDeleteButton, setShowDeleteButton] = useState(false)\n\n//   const [Modal, setModal] = useState(false)\n\n//   const toggelModal = () => {\n//     setModal(!Modal)\n//   }\n\n//   const nextMonth = () => {\n//     if (currentMonth < 11) {\n//       setCurrentMonth(prev => prev + 1)\n//     } else {\n//       setCurrentMonth(0)\n//       setCurrentYear(prev => prev + 1)\n//     }\n//   }\n\n//   const prevMonth = () => {\n//     if (currentMonth > 0) {\n//       setCurrentMonth(prev => prev - 1)\n//     } else {\n//       setCurrentMonth(11)\n//       setCurrentYear(prev => prev - 1)\n//     }\n//   }\n\n//   const loadData = thisevent => {\n//     const eventOnDay = eventsArr.find(\n//       event =>\n//         event.title === thisevent.title &&\n//         event.date === thisevent.date &&\n//         event.reminderTime === thisevent.reminderTime\n//     )\n//     setEventForm(eventOnDay || null)\n//     setSelectedEvent(eventOnDay)\n//   }\n\n//   const onAddEditEvent = (event, data, selectedDay) => {\n//     event.preventDefault()\n//     if (selectedEvent) {\n//       editEvent(selectedEvent, data)\n//       setSelectedEvent(null)\n//     } else {\n//       addEvent(data, selectedDay)\n//     }\n//     toggelModal()\n//     setEventForm(null)\n//   }\n\n//   const onRemoveEvent = eventToBeDel => {\n//     removeEvent(eventToBeDel)\n//     toggelModal()\n//     setEventForm(null)\n//     setSelectedEvent(null)\n//   }\n\n//   return (\n//     <Wrapper>\n//       <CalenderHead>\n//         <Icon.ArrowLeftCircleFill onClick={prevMonth} />\n//         <p className='m-0'>\n//           {MONTHS[currentMonth]} {currentYear}\n//         </p>\n//         <Icon.ArrowRightCircleFill onClick={nextMonth} />\n//       </CalenderHead>\n//       <SevenColGrid>\n//         {getSortedDays(currentMonth, currentYear).map(day => (\n//           <HeadDay>{day}</HeadDay>\n//         ))}\n//       </SevenColGrid>\n//       <CalenderBody fourCol={DaysInMonth === 28}>\n//         {range(DaysInMonth).map(day => {\n//           const dateObj = getDateobj(day, currentMonth, currentYear)\n//           const isCurrentDate = areDatesTheSame(new Date(), dateObj)\n//           const eventsOnDate = eventsArr.filter(event =>\n//             areDatesTheSame(dateObj, event.date)\n//           )\n//           return (\n//             <>\n//               <StyledDay\n//                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\n//                 onClick={e => {\n//                   setSelectedDay(getDateobj(day, currentMonth, currentYear))\n//                   setEventForm(null)\n//                   setShowDeleteButton(false)\n//                   toggelModal()\n//                 }}\n//                 active={areDatesTheSame(\n//                   new Date(),\n//                   getDateobj(day, currentMonth, currentYear)\n//                 )}\n//               >\n//                 <p>{day}</p>\n//                 {eventsArr.map(\n//                   event =>\n//                     areDatesTheSame(\n//                       getDateobj(day, currentMonth, currentYear),\n//                       event.date\n//                     ) && (\n//                       <StyledEvent>\n//                         <span\n//                           className='w-100 text-start'\n//                           type='button'\n//                           onClick={e => {\n//                             e.stopPropagation()\n//                             loadData(event)\n//                             setShowDeleteButton(true)\n//                             toggelModal()\n//                           }}\n//                         >\n//                           {event.title}\n//                         </span>\n//                         {/* <button className=\"border-0 bg-transparent\"><Icon.XLg className=\"ms-2\" onClick={(e) => {\n//                                         e.stopPropagation();\n//                                         onRemoveEvent(event.date, event.title);\n//                                     }} /></button> */}\n//                       </StyledEvent>\n//                     )\n//                 )}\n//               </StyledDay>\n//               {Modal && (\n//                 <div className='modal'>\n//                   <div onClick={toggelModal} className='overlay'>\n//                     <div\n//                       className='modal-content'\n//                       onClick={e => e.stopPropagation()}\n//                     >\n//                       <h4 className='form-heading'>Event</h4>\n//                       <button\n//                         type='button'\n//                         className='close-btn'\n//                         onClick={toggelModal}\n//                       >\n//                         <Icon.XLg />\n//                       </button>\n//                       {showDeleteButton && (\n//                         <button\n//                           className='delete-btn'\n//                           onClick={e => {\n//                             e.stopPropagation()\n//                             onRemoveEvent(eventForm)\n//                           }}\n//                         >\n//                           <Icon.Trash3 />\n//                         </button>\n//                       )}\n//                       <form>\n//                         <div className='form-group mb-3'>\n//                           <label className='form-label'>Title</label>\n//                           <input\n//                             type='text'\n//                             className='form-control'\n//                             value={eventForm?.title ?? ''}\n//                             onChange={e =>\n//                               setEventForm({\n//                                 ...eventForm,\n//                                 title: e.target.value\n//                               })\n//                             }\n//                           />\n//                         </div>\n//                         <div className='form-group mb-3'>\n//                           <label className='form-label'>Description</label>\n//                           <textarea\n//                             className='form-control'\n//                             rows='3'\n//                             value={eventForm ? eventForm.desc : ''}\n//                             onChange={e =>\n//                               setEventForm({\n//                                 ...eventForm,\n//                                 desc: e.target.value\n//                               })\n//                             }\n//                             placeholder='Event description'\n//                             required\n//                           />\n//                         </div>\n//                         {/* <div className='form-group mb-3'>\n//                           <label className='form-label'>Reminder Time</label>\n//                           <input\n//                             className='form-control'\n//                             value={eventForm ? eventForm.reminderTime : ''}\n//                             onChange={e =>\n//                               setEventForm({\n//                                 ...eventForm,\n//                                 reminderTime: e.target.value\n//                               })\n//                             }\n//                             type='text'\n//                             placeholder='hh:mm'\n//                             required\n//                           ></input>\n//                         </div> */}\n//                         <div className='d-flex justify-content-end'>\n//                           <button\n//                             className='save-event'\n//                             onClick={e => {\n//                               e.stopPropagation()\n//                               onAddEditEvent(e, eventForm, selectedDay)\n//                             }}\n//                           >\n//                             Save\n//                           </button>\n//                         </div>\n//                       </form>\n//                     </div>\n//                   </div>\n//                 </div>\n//               )}\n//             </>\n//           )\n//         })}\n//       </CalenderBody>\n//     </Wrapper>\n//   )\n// }\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalenderBody, CalenderHead, PortalWrapper, StyledDay, StyledEvent, Wrapper, SevenColGrid, HeadDays } from './styled';\nimport { DAYS, MONTHS, MOCKEVENTS } from './cons';\nimport { areDateTheSame, getDataObj, getDaysInMonth, getRandomColor, getSortedDays, range } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Portal = _ref => {\n  let {\n    children\n  } = _ref;\n  const portalRoot = document.getElementById('portal-root');\n  return /*#__PURE__*/ReactDOM.createPortal(children, portalRoot);\n};\n_c = Portal;\nexport const Calender = _ref2 => {\n  _s();\n  let {\n    startingDate\n  } = _ref2;\n  const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\n  const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\n  const DAYSINMONTH = getDaysInMonth(currentMonth, currentYear);\n  const [events, setEvents] = useState(() => {\n    const storedEvents = localStorage.getItem('events');\n    return storedEvents ? JSON.parse(storedEvents) : MOCKEVENTS;\n  });\n  const [showPortal, setShowPortal] = useState(false);\n  const [portalData, setPortalData] = useState({});\n  const [isEditing, setIsEditing] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const nextMonth = () => {\n    if (currentMonth < 11) {\n      setCurrentMonth(prev => prev + 1);\n    } else {\n      setCurrentMonth(0);\n      setCurrentYear(prev => prev + 1);\n    }\n  };\n  const prevMonth = () => {\n    if (currentMonth > 0) {\n      setCurrentMonth(prev => prev - 1);\n    } else {\n      setCurrentMonth(11);\n      setCurrentYear(prev => prev - 1);\n    }\n  };\n  const handleOnClickEvent = event => {\n    setShowPortal(true);\n    setPortalData(event);\n    setIsEditing(true);\n  };\n  const handlePortalClose = () => {\n    setShowPortal(false);\n    setIsEditing(false);\n  };\n  const handleDelete = (eventToDelete, event) => {\n    if (event) {\n      event.preventDefault();\n    }\n    setEvents(prevEvents => prevEvents.filter(ev => ev.title !== eventToDelete.title));\n    handlePortalClose();\n  };\n  const handleEdit = (eventToUpdate, newTitle) => {\n    setEvents(prevEvents => prevEvents.map(ev => {\n      if (ev.title === eventToUpdate.title && ev.date === eventToUpdate.date) {\n        return {\n          ...ev,\n          title: newTitle\n        };\n      }\n      return ev;\n    }));\n  };\n  const handleAddEvent = (date, color) => {\n    setPortalData({\n      date,\n      color\n    });\n    setShowPortal(true);\n    setIsAdding(true);\n  };\n  const handleSaveEvent = newTitle => {\n    if (newTitle) {\n      if (isAdding) {\n        const newEvent = {\n          date: portalData.date,\n          title: newTitle,\n          color: portalData.color\n        };\n        const updatedEvents = [...events, newEvent];\n        setEvents(updatedEvents);\n        localStorage.setItem('events', JSON.stringify(updatedEvents));\n        setIsAdding(false);\n      } else if (isEditing) {\n        const updatedEvents = events.map(ev => {\n          if (ev.title === portalData.title && areDateTheSame(ev.date, portalData.date)) {\n            return {\n              ...ev,\n              title: newTitle\n            };\n          }\n          return ev;\n        });\n        setEvents(updatedEvents);\n        localStorage.setItem('events', JSON.stringify(updatedEvents));\n        setIsEditing(false);\n      }\n    }\n    handlePortalClose();\n  };\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEvents(JSON.parse(storedEvents));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CalenderHead, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevMonth,\n        children: '<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: `${MONTHS[currentMonth]} ${currentYear}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextMonth,\n        children: '>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SevenColGrid, {\n      children: [DAYS.map(day => /*#__PURE__*/_jsxDEV(HeadDays, {\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this)), range(DAYSINMONTH).map((_, i) => {\n        const day = i + 1;\n        const dateObj = getDataObj(day, currentMonth, currentYear);\n        const sortedEvents = getSortedDays(events, dateObj);\n        return /*#__PURE__*/_jsxDEV(StyledDay, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this), sortedEvents.map(event => /*#__PURE__*/_jsxDEV(StyledEvent, {\n            color: event.color,\n            onClick: () => handleOnClickEvent(event),\n            children: event.title\n          }, `${event.title}${event.date}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddEvent(dateObj, getRandomColor()),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), showPortal && /*#__PURE__*/_jsxDEV(Portal, {\n      children: /*#__PURE__*/_jsxDEV(PortalWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isEditing ? 'Edit Event' : 'Add Event'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePortalClose,\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", portalData.date.toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            defaultValue: isEditing ? portalData.title : '',\n            autoFocus: true,\n            onKeyDown: e => {\n              if (e.key === 'Enter') {\n                handleSaveEvent(e.target.value);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSaveEvent(document.querySelector('input').value),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(portalData),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n};\n_s(Calender, \"xft+EyIa0/qYR5WhbDTipLHUp5g=\");\n_c2 = Calender;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Calender, {\n  startingDate: new Date()\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 463,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nvar _c, _c2;\n$RefreshReg$(_c, \"Portal\");\n$RefreshReg$(_c2, \"Calender\");","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","CalenderBody","CalenderHead","PortalWrapper","StyledDay","StyledEvent","Wrapper","SevenColGrid","HeadDays","DAYS","MONTHS","MOCKEVENTS","areDateTheSame","getDataObj","getDaysInMonth","getRandomColor","getSortedDays","range","jsxDEV","_jsxDEV","Portal","_ref","children","portalRoot","document","getElementById","createPortal","_c","Calender","_ref2","_s","startingDate","currentMonth","setCurrentMonth","getMonth","currentYear","setCurrentYear","getFullYear","DAYSINMONTH","events","setEvents","storedEvents","localStorage","getItem","JSON","parse","showPortal","setShowPortal","portalData","setPortalData","isEditing","setIsEditing","isAdding","setIsAdding","nextMonth","prev","prevMonth","handleOnClickEvent","event","handlePortalClose","handleDelete","eventToDelete","preventDefault","prevEvents","filter","ev","title","handleEdit","eventToUpdate","newTitle","map","date","handleAddEvent","color","handleSaveEvent","newEvent","updatedEvents","setItem","stringify","onClick","fileName","_jsxFileName","lineNumber","columnNumber","day","_","i","dateObj","sortedEvents","toLocaleDateString","type","defaultValue","autoFocus","onKeyDown","e","key","target","value","querySelector","_c2","render","Date","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/Calender/calender.js"],"sourcesContent":["// import {\r\n//   Wrapper,\r\n//   CalenderHead,\r\n//   SevenColGrid,\r\n//   HeadDay,\r\n//   CalenderBody,\r\n//   StyledDay,\r\n//   StyledEvent\r\n// } from './styled'\r\n// import 'bootstrap/dist/css/bootstrap.min.css'\r\n// import * as Icon from 'react-bootstrap-icons'\r\n// import { Days, MONTHS } from './const'\r\n// import {\r\n//   range,\r\n//   getDaysInMonth,\r\n//   getSortedDays,\r\n//   areDatesTheSame,\r\n//   getDateobj\r\n// } from './util'\r\n// import { useState, useEffect } from 'react'\r\n// import { EventModal } from './addEventModal/addEventModal'\r\n// import './addEventModal/addEventModal.css'\r\n\r\n// export const Calender = ({\r\n//   startingDate,\r\n//   eventsArr,\r\n//   addEvent,\r\n//   editEvent,\r\n//   removeEvent\r\n// }) => {\r\n//   const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth())\r\n//   const [currentYear, setCurrentYear] = useState(startingDate.getFullYear())\r\n//   const DaysInMonth = getDaysInMonth(currentMonth, currentYear)\r\n//   const [selectedDay, setSelectedDay] = useState(new Date().getDay())\r\n//   const [selectedEvent, setSelectedEvent] = useState(null)\r\n//   const [eventForm, setEventForm] = useState({})\r\n\r\n//   const [showDeleteButton, setShowDeleteButton] = useState(false)\r\n\r\n//   const [Modal, setModal] = useState(false)\r\n\r\n//   const toggelModal = () => {\r\n//     setModal(!Modal)\r\n//   }\r\n\r\n//   const nextMonth = () => {\r\n//     if (currentMonth < 11) {\r\n//       setCurrentMonth(prev => prev + 1)\r\n//     } else {\r\n//       setCurrentMonth(0)\r\n//       setCurrentYear(prev => prev + 1)\r\n//     }\r\n//   }\r\n\r\n//   const prevMonth = () => {\r\n//     if (currentMonth > 0) {\r\n//       setCurrentMonth(prev => prev - 1)\r\n//     } else {\r\n//       setCurrentMonth(11)\r\n//       setCurrentYear(prev => prev - 1)\r\n//     }\r\n//   }\r\n\r\n//   const loadData = thisevent => {\r\n//     const eventOnDay = eventsArr.find(\r\n//       event =>\r\n//         event.title === thisevent.title &&\r\n//         event.date === thisevent.date &&\r\n//         event.reminderTime === thisevent.reminderTime\r\n//     )\r\n//     setEventForm(eventOnDay || null)\r\n//     setSelectedEvent(eventOnDay)\r\n//   }\r\n\r\n//   const onAddEditEvent = (event, data, selectedDay) => {\r\n//     event.preventDefault()\r\n//     if (selectedEvent) {\r\n//       editEvent(selectedEvent, data)\r\n//       setSelectedEvent(null)\r\n//     } else {\r\n//       addEvent(data, selectedDay)\r\n//     }\r\n//     toggelModal()\r\n//     setEventForm(null)\r\n//   }\r\n\r\n//   const onRemoveEvent = eventToBeDel => {\r\n//     removeEvent(eventToBeDel)\r\n//     toggelModal()\r\n//     setEventForm(null)\r\n//     setSelectedEvent(null)\r\n//   }\r\n\r\n//   return (\r\n//     <Wrapper>\r\n//       <CalenderHead>\r\n//         <Icon.ArrowLeftCircleFill onClick={prevMonth} />\r\n//         <p className='m-0'>\r\n//           {MONTHS[currentMonth]} {currentYear}\r\n//         </p>\r\n//         <Icon.ArrowRightCircleFill onClick={nextMonth} />\r\n//       </CalenderHead>\r\n//       <SevenColGrid>\r\n//         {getSortedDays(currentMonth, currentYear).map(day => (\r\n//           <HeadDay>{day}</HeadDay>\r\n//         ))}\r\n//       </SevenColGrid>\r\n//       <CalenderBody fourCol={DaysInMonth === 28}>\r\n//         {range(DaysInMonth).map(day => {\r\n//           const dateObj = getDateobj(day, currentMonth, currentYear)\r\n//           const isCurrentDate = areDatesTheSame(new Date(), dateObj)\r\n//           const eventsOnDate = eventsArr.filter(event =>\r\n//             areDatesTheSame(dateObj, event.date)\r\n//           )\r\n//           return (\r\n//             <>\r\n//               <StyledDay\r\n//                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\r\n//                 onClick={e => {\r\n//                   setSelectedDay(getDateobj(day, currentMonth, currentYear))\r\n//                   setEventForm(null)\r\n//                   setShowDeleteButton(false)\r\n//                   toggelModal()\r\n//                 }}\r\n//                 active={areDatesTheSame(\r\n//                   new Date(),\r\n//                   getDateobj(day, currentMonth, currentYear)\r\n//                 )}\r\n//               >\r\n//                 <p>{day}</p>\r\n//                 {eventsArr.map(\r\n//                   event =>\r\n//                     areDatesTheSame(\r\n//                       getDateobj(day, currentMonth, currentYear),\r\n//                       event.date\r\n//                     ) && (\r\n//                       <StyledEvent>\r\n//                         <span\r\n//                           className='w-100 text-start'\r\n//                           type='button'\r\n//                           onClick={e => {\r\n//                             e.stopPropagation()\r\n//                             loadData(event)\r\n//                             setShowDeleteButton(true)\r\n//                             toggelModal()\r\n//                           }}\r\n//                         >\r\n//                           {event.title}\r\n//                         </span>\r\n//                         {/* <button className=\"border-0 bg-transparent\"><Icon.XLg className=\"ms-2\" onClick={(e) => {\r\n//                                         e.stopPropagation();\r\n//                                         onRemoveEvent(event.date, event.title);\r\n//                                     }} /></button> */}\r\n//                       </StyledEvent>\r\n//                     )\r\n//                 )}\r\n//               </StyledDay>\r\n//               {Modal && (\r\n//                 <div className='modal'>\r\n//                   <div onClick={toggelModal} className='overlay'>\r\n//                     <div\r\n//                       className='modal-content'\r\n//                       onClick={e => e.stopPropagation()}\r\n//                     >\r\n//                       <h4 className='form-heading'>Event</h4>\r\n//                       <button\r\n//                         type='button'\r\n//                         className='close-btn'\r\n//                         onClick={toggelModal}\r\n//                       >\r\n//                         <Icon.XLg />\r\n//                       </button>\r\n//                       {showDeleteButton && (\r\n//                         <button\r\n//                           className='delete-btn'\r\n//                           onClick={e => {\r\n//                             e.stopPropagation()\r\n//                             onRemoveEvent(eventForm)\r\n//                           }}\r\n//                         >\r\n//                           <Icon.Trash3 />\r\n//                         </button>\r\n//                       )}\r\n//                       <form>\r\n//                         <div className='form-group mb-3'>\r\n//                           <label className='form-label'>Title</label>\r\n//                           <input\r\n//                             type='text'\r\n//                             className='form-control'\r\n//                             value={eventForm?.title ?? ''}\r\n//                             onChange={e =>\r\n//                               setEventForm({\r\n//                                 ...eventForm,\r\n//                                 title: e.target.value\r\n//                               })\r\n//                             }\r\n//                           />\r\n//                         </div>\r\n//                         <div className='form-group mb-3'>\r\n//                           <label className='form-label'>Description</label>\r\n//                           <textarea\r\n//                             className='form-control'\r\n//                             rows='3'\r\n//                             value={eventForm ? eventForm.desc : ''}\r\n//                             onChange={e =>\r\n//                               setEventForm({\r\n//                                 ...eventForm,\r\n//                                 desc: e.target.value\r\n//                               })\r\n//                             }\r\n//                             placeholder='Event description'\r\n//                             required\r\n//                           />\r\n//                         </div>\r\n//                         {/* <div className='form-group mb-3'>\r\n//                           <label className='form-label'>Reminder Time</label>\r\n//                           <input\r\n//                             className='form-control'\r\n//                             value={eventForm ? eventForm.reminderTime : ''}\r\n//                             onChange={e =>\r\n//                               setEventForm({\r\n//                                 ...eventForm,\r\n//                                 reminderTime: e.target.value\r\n//                               })\r\n//                             }\r\n//                             type='text'\r\n//                             placeholder='hh:mm'\r\n//                             required\r\n//                           ></input>\r\n//                         </div> */}\r\n//                         <div className='d-flex justify-content-end'>\r\n//                           <button\r\n//                             className='save-event'\r\n//                             onClick={e => {\r\n//                               e.stopPropagation()\r\n//                               onAddEditEvent(e, eventForm, selectedDay)\r\n//                             }}\r\n//                           >\r\n//                             Save\r\n//                           </button>\r\n//                         </div>\r\n//                       </form>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )}\r\n//             </>\r\n//           )\r\n//         })}\r\n//       </CalenderBody>\r\n//     </Wrapper>\r\n//   )\r\n// }\r\nimport React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  CalenderBody,\r\n  CalenderHead,\r\n  PortalWrapper,\r\n  StyledDay,\r\n  StyledEvent,\r\n  Wrapper,\r\n  SevenColGrid,\r\n  HeadDays\r\n} from './styled';\r\nimport { DAYS, MONTHS, MOCKEVENTS } from './cons';\r\nimport {\r\n  areDateTheSame,\r\n  getDataObj,\r\n  getDaysInMonth,\r\n  getRandomColor,\r\n  getSortedDays,\r\n  range\r\n} from './util';\r\n\r\nconst Portal = ({ children }) => {\r\n  const portalRoot = document.getElementById('portal-root');\r\n  return ReactDOM.createPortal(children, portalRoot);\r\n};\r\n\r\nexport const Calender = ({ startingDate }) => {\r\n  const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\r\n  const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\r\n  const DAYSINMONTH = getDaysInMonth(currentMonth, currentYear);\r\n  const [events, setEvents] = useState(() => {\r\n    const storedEvents = localStorage.getItem('events');\r\n    return storedEvents ? JSON.parse(storedEvents) : MOCKEVENTS;\r\n  });\r\n  const [showPortal, setShowPortal] = useState(false);\r\n  const [portalData, setPortalData] = useState({});\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n\r\n  const nextMonth = () => {\r\n    if (currentMonth < 11) {\r\n      setCurrentMonth((prev) => prev + 1);\r\n    } else {\r\n      setCurrentMonth(0);\r\n      setCurrentYear((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const prevMonth = () => {\r\n    if (currentMonth > 0) {\r\n      setCurrentMonth((prev) => prev - 1);\r\n    } else {\r\n      setCurrentMonth(11);\r\n      setCurrentYear((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  const handleOnClickEvent = (event) => {\r\n    setShowPortal(true);\r\n    setPortalData(event);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handlePortalClose = () => {\r\n    setShowPortal(false);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDelete = (eventToDelete, event) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    setEvents((prevEvents) =>\r\n      prevEvents.filter((ev) => ev.title !== eventToDelete.title)\r\n    );\r\n    handlePortalClose();\r\n  };\r\n\r\n  const handleEdit = (eventToUpdate, newTitle) => {\r\n    setEvents((prevEvents) =>\r\n      prevEvents.map((ev) => {\r\n        if (\r\n          ev.title === eventToUpdate.title &&\r\n          ev.date === eventToUpdate.date\r\n        ) {\r\n          return { ...ev, title: newTitle };\r\n        }\r\n        return ev;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleAddEvent = (date, color) => {\r\n    setPortalData({ date, color });\r\n    setShowPortal(true);\r\n    setIsAdding(true);\r\n  };\r\n\r\n  const handleSaveEvent = (newTitle) => {\r\n    if (newTitle) {\r\n      if (isAdding) {\r\n        const newEvent = {\r\n          date: portalData.date,\r\n          title: newTitle,\r\n          color: portalData.color\r\n        };\r\n        const updatedEvents = [...events, newEvent];\r\n        setEvents(updatedEvents);\r\n        localStorage.setItem('events', JSON.stringify(updatedEvents));\r\n        setIsAdding(false);\r\n      } else if (isEditing) {\r\n        const updatedEvents = events.map((ev) => {\r\n          if (\r\n            ev.title === portalData.title &&\r\n            areDateTheSame(ev.date, portalData.date)\r\n          ) {\r\n            return { ...ev, title: newTitle };\r\n          }\r\n          return ev;\r\n        });\r\n        setEvents(updatedEvents);\r\n        localStorage.setItem('events', JSON.stringify(updatedEvents));\r\n        setIsEditing(false);\r\n      }\r\n    }\r\n    handlePortalClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedEvents = localStorage.getItem('events');\r\n    if (storedEvents) {\r\n      setEvents(JSON.parse(storedEvents));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <CalenderHead>\r\n        <button onClick={prevMonth}>{'<'}</button>\r\n        <h1>{`${MONTHS[currentMonth]} ${currentYear}`}</h1>\r\n        <button onClick={nextMonth}>{'>'}</button>\r\n      </CalenderHead>\r\n      <SevenColGrid>\r\n        {DAYS.map((day) => (\r\n          <HeadDays key={day}>{day}</HeadDays>\r\n        ))}\r\n        {range(DAYSINMONTH).map((_, i) => {\r\n          const day = i + 1;\r\n          const dateObj = getDataObj(day, currentMonth, currentYear);\r\n          const sortedEvents = getSortedDays(events, dateObj);\r\n          return (\r\n            <StyledDay key={day}>\r\n              <p>{day}</p>\r\n              {sortedEvents.map((event) => (\r\n                <StyledEvent\r\n                  key={`${event.title}${event.date}`}\r\n                  color={event.color}\r\n                  onClick={() => handleOnClickEvent(event)}\r\n                >\r\n                  {event.title}\r\n                </StyledEvent>\r\n              ))}\r\n              <button onClick={() => handleAddEvent(dateObj, getRandomColor())}>\r\n                +\r\n              </button>\r\n            </StyledDay>\r\n          );\r\n        })}\r\n      </SevenColGrid>\r\n      {showPortal && (\r\n        <Portal>\r\n          <PortalWrapper>\r\n            <div>\r\n              <h2>{isEditing ? 'Edit Event' : 'Add Event'}</h2>\r\n              <button onClick={handlePortalClose}>X</button>\r\n            </div>\r\n            <div>\r\n              <p>Date: {portalData.date.toLocaleDateString()}</p>\r\n              <p>Title:</p>\r\n              <input\r\n                type=\"text\"\r\n                defaultValue={isEditing ? portalData.title : ''}\r\n                autoFocus\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleSaveEvent(e.target.value);\r\n                  }\r\n                }}\r\n              />\r\n              <div>\r\n                <button\r\n                  onClick={() => handleSaveEvent(document.querySelector('input').value)}\r\n                >\r\n                  Save\r\n                </button>\r\n                {isEditing && (\r\n                  <button onClick={() => handleDelete(portalData)}>Delete</button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </PortalWrapper>\r\n        </Portal>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <Calender startingDate={new Date()} />,\r\n  document.getElementById('root')\r\n);\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}