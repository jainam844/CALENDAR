{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\Calender\\\\calender.js\",\n  _s = $RefreshSig$();\nimport { Wrapper, CalenderHead, SevenColGrid, HeadDay, CalenderBody, StyledDay, StyledEvent } from './styled';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as Icon from 'react-bootstrap-icons';\nimport { Days, MONTHS } from './const';\nimport { range, getDaysInMonth, getSortedDays, areDatesTheSame, getDateobj } from './util';\nimport { useState, useEffect } from 'react';\nimport { EventModal } from './addEventModal/addEventModal';\nimport './addEventModal/addEventModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Calender = _ref => {\n  _s();\n  let {\n    startingDate,\n    eventsArr,\n    addEvent,\n    editEvent,\n    removeEvent\n  } = _ref;\n  const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\n  const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\n  const DaysInMonth = getDaysInMonth(currentMonth, currentYear);\n  const [selectedDay, setSelectedDay] = useState(new Date().getDay());\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [eventForm, setEventForm] = useState({\n    title: '',\n    time: '',\n    reminderTime: '' // Add the 'reminderTime' property\n  });\n\n  const [showDeleteButton, setShowDeleteButton] = useState(false);\n  const [Modal, setModal] = useState(false);\n  const toggelModal = () => {\n    setModal(!Modal);\n  };\n  const nextMonth = () => {\n    if (currentMonth < 11) {\n      setCurrentMonth(prev => prev + 1);\n    } else {\n      setCurrentMonth(0);\n      setCurrentYear(prev => prev + 1);\n    }\n  };\n  const prevMonth = () => {\n    if (currentMonth > 0) {\n      setCurrentMonth(prev => prev - 1);\n    } else {\n      setCurrentMonth(11);\n      setCurrentYear(prev => prev - 1);\n    }\n  };\n  const loadData = thisevent => {\n    const eventOnDay = eventsArr.find(event => event.title === thisevent.title && event.date === thisevent.date && event.reminderTime === thisevent.reminderTime);\n    setEventForm(eventOnDay || null);\n    setSelectedEvent(eventOnDay || null);\n  };\n  const onAddEditEvent = (event, data, selectedDay) => {\n    event.preventDefault();\n    if (selectedEvent) {\n      editEvent(selectedEvent, data);\n      setSelectedEvent(null);\n    } else {\n      addEvent(data, selectedDay);\n    }\n    toggelModal();\n    setEventForm(null);\n  };\n  const onRemoveEvent = eventToBeDel => {\n    removeEvent(eventToBeDel);\n    toggelModal();\n    setEventForm(null);\n    setSelectedEvent(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CalenderHead, {\n      children: [/*#__PURE__*/_jsxDEV(Icon.ArrowLeftCircleFill, {\n        onClick: prevMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"m-0\",\n        children: [MONTHS[currentMonth], \" \", currentYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon.ArrowRightCircleFill, {\n        onClick: nextMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SevenColGrid, {\n      children: getSortedDays(currentMonth, currentYear).map(day => /*#__PURE__*/_jsxDEV(HeadDay, {\n        children: day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalenderBody, {\n      fourCol: DaysInMonth === 28,\n      children: range(DaysInMonth).map(day => {\n        const dateObj = getDateobj(day, currentMonth, currentYear);\n        const isCurrentDate = areDatesTheSame(new Date(), dateObj);\n        const eventsOnDate = eventsArr.filter(event => areDatesTheSame(dateObj, event.date));\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(StyledDay, {\n            onClick: e => {\n              setSelectedDay(getDateobj(day, currentMonth, currentYear));\n              setEventForm(null);\n              setShowDeleteButton(false);\n              setSelectedEvent(null); // Clear the selectedEvent state for new events\n              toggelModal();\n            },\n            active: areDatesTheSame(new Date(), getDateobj(day, currentMonth, currentYear)),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), eventsArr.map(event => areDatesTheSame(getDateobj(day, currentMonth, currentYear), event.date) && /*#__PURE__*/_jsxDEV(StyledEvent, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"w-100 text-start\",\n                type: \"button\",\n                onClick: e => {\n                  e.stopPropagation();\n                  loadData(event);\n                  setShowDeleteButton(true);\n                  toggelModal();\n                },\n                children: event.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), Modal && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: toggelModal,\n              className: \"overlay\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-content\",\n                onClick: e => e.stopPropagation(),\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"form-heading\",\n                  children: selectedEvent ? 'Edit Event' : 'Add Event'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"close-btn\",\n                  onClick: toggelModal,\n                  children: /*#__PURE__*/_jsxDEV(Icon.XLg, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group mb-3\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        className: \"form-label\",\n                        children: \"Title\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 181,\n                        columnNumber: 7\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 5\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      className: \"form-control\",\n                      value: (eventForm === null || eventForm === void 0 ? void 0 : eventForm.title) || '',\n                      onChange: e => setEventForm({\n                        ...eventForm,\n                        title: e.target.value\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 183,\n                      columnNumber: 5\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group mb-3\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        className: \"form-label\",\n                        children: \"Time\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 198,\n                        columnNumber: 7\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 5\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      className: \"form-control\",\n                      value: (eventForm === null || eventForm === void 0 ? void 0 : eventForm.time) || '',\n                      onChange: e => setEventForm({\n                        ...eventForm,\n                        time: e.target.value\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 5\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 3\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"d-flex justify-content-end\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"save-event\",\n                      disabled: !(eventForm !== null && eventForm !== void 0 && eventForm.title) // Disable the button if the title is not filled\n                      ,\n                      style: {\n                        opacity: eventForm !== null && eventForm !== void 0 && eventForm.title ? 1 : 0.5,\n                        cursor: eventForm !== null && eventForm !== void 0 && eventForm.title ? 'pointer' : 'not-allowed'\n                      },\n                      onClick: e => {\n                        e.stopPropagation();\n                        onAddEditEvent(e, eventForm, selectedDay);\n                      },\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 215,\n                      columnNumber: 27\n                    }, this), showDeleteButton && /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"delete-btn\",\n                      onClick: e => {\n                        e.stopPropagation();\n                        onRemoveEvent(eventForm);\n                      },\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 228,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n// import {\n//   Wrapper,\n//   CalenderHead,\n//   SevenColGrid,\n//   HeadDay,\n//   CalenderBody,\n//   StyledDay,\n//   StyledEvent\n// } from './styled'\n// import 'bootstrap/dist/css/bootstrap.min.css'\n// import * as Icon from 'react-bootstrap-icons'\n// import { Days, MONTHS } from './const'\n// import {\n//   range,\n//   getDaysInMonth,\n//   getSortedDays,\n//   areDatesTheSame,\n//   getDateobj\n// } from './util'\n// import { useState, useEffect, useRef } from 'react'\n// import { EventModal } from './addEventModal/addEventModal'\n// import './addEventModal/addEventModal.css'\n\n// export const Calender = ({\n//   startingDate,\n//   eventsArr,\n//   addEvent,\n//   editEvent,\n//   removeEvent,\n//   remindersArr,\n//   removeReminder,\n//   snoozeForReminder\n// }) => {\n//   const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth())\n//   const [currentYear, setCurrentYear] = useState(startingDate.getFullYear())\n//   const DaysInMonth = getDaysInMonth(currentMonth, currentYear)\n//   const [selectedDay, setSelectedDay] = useState(new Date().getDay())\n//   const [selectedEvent, setSelectedEvent] = useState(null)\n//   const [eventForm, setEventForm] = useState(null)\n//   const [reminderModal, setReminderModal] = useState(false)\n//   const [showDeleteButton, setShowDeleteButton] = useState(false)\n//   const reminderSelectRef = useRef(null)\n\n//   const [Modal, setModal] = useState(false)\n\n//   const toggelModal = () => {\n//     setModal(!Modal)\n//   }\n\n//   const toggelReminderModal = () => {\n//     setReminderModal(!reminderModal)\n//   }\n\n//   const nextMonth = () => {\n//     if (currentMonth < 11) {\n//       setCurrentMonth(prev => prev + 1)\n//     } else {\n//       setCurrentMonth(0)\n//       setCurrentYear(prev => prev + 1)\n//     }\n//   }\n\n//   const prevMonth = () => {\n//     if (currentMonth > 0) {\n//       setCurrentMonth(prev => prev - 1)\n//     } else {\n//       setCurrentMonth(11)\n//       setCurrentYear(prev => prev - 1)\n//     }\n//   }\n\n//   const loadData = thisevent => {\n//     const eventOnDay = eventsArr.find(\n//       event =>\n//         event.title === thisevent.title &&\n//         event.date === thisevent.date &&\n//         event.reminderTime === thisevent.reminderTime\n//     )\n//     setEventForm(eventOnDay || null)\n//     setSelectedEvent(eventOnDay)\n//   }\n\n//   const onAddEditEvent = (event, data, selectedDay, reminderVal) => {\n//     event.preventDefault()\n\n//     const [eventHours, eventMinutes] = data.eventTime.split(':').map(Number)\n//     const eventTime = new Date(\n//       selectedDay.getFullYear(), // Year\n//       selectedDay.getMonth(), // Month (0-based)\n//       selectedDay.getDate() // Day\n//     )\n//     eventTime.setHours(eventHours)\n//     eventTime.setMinutes(eventMinutes)\n\n//     const reminderTimeDate = new Date(eventTime.getTime() - reminderVal * 60000)\n//     if (reminderVal != '') {\n//       if (reminderTimeDate < new Date()) {\n//         alert('Please select reminder value greater than the current time!!')\n//       } else {\n//         if (selectedEvent) {\n//           editEvent(selectedEvent, data, selectedDay, reminderTimeDate)\n//           setSelectedEvent(null)\n//         } else {\n//           addEvent(data, selectedDay, reminderTimeDate)\n//         }\n//         toggelModal()\n//         setEventForm(null)\n//       }\n//     } else {\n//       alert('Please select reminder value!!')\n//     }\n//   }\n\n//   const onRemoveEvent = eventToBeDel => {\n//     removeEvent(eventToBeDel)\n//     toggelModal()\n//     setEventForm(null)\n//     setSelectedEvent(null)\n//   }\n\n//   const dismissReminder = reminder => {\n//     removeReminder(reminder)\n//   }\n\n//   const convertMilliseconds = milliseconds => {\n//     const seconds = Math.floor(milliseconds / 1000)\n//     const minutes = Math.floor(seconds / 60)\n//     const hours = Math.floor(minutes / 60)\n//     const days = Math.floor(hours / 24)\n//     const remainingHours = hours % 24\n//     const remainingMinutes = minutes % 60\n\n//     let result = ''\n\n//     if (days > 0) {\n//       result += `${days} day(s) `\n//     }\n//     if (remainingHours > 0) {\n//       result += `${remainingHours} hr `\n//     }\n//     if (remainingMinutes > 0) {\n//       result += `${remainingMinutes} min`\n//     }\n\n//     return result.trim()\n//   }\n\n//   // moment library\n\n//   const snoozeReminder = (reminder, snoozeVal) => {\n//     // var snoozeValinmillisec;\n//     const eventTime = new Date(\n//       parseInt(reminder.eventFullDate.slice(0, 4)),\n//       parseInt(reminder.eventFullDate.slice(5, 7)) - 1,\n//       parseInt(reminder.eventFullDate.slice(8, 10)),\n//       parseInt(reminder.eventFullDate.slice(11, 13)),\n//       parseInt(reminder.eventFullDate.slice(14, 16))\n//     )\n\n//     const snoozeTime = new Date(eventTime.getTime() - snoozeVal * 60000)\n//     // if(snoozeTime > new Date()){\n\n//     //     console.log(snoozeTime)\n//     // }\n\n//     if (snoozeVal != '') {\n//       // snoozeValinmillisec = parseInt(snoozeVal) * 60000;\n//       if (snoozeTime < new Date()) {\n//         alert('not possible')\n//       } else {\n//         // alert(\"all ok\");\n//         snoozeForReminder(reminder, snoozeTime)\n//         toggelReminderModal()\n//       }\n//     } else {\n//       alert('please select snooze val!')\n//     }\n//   }\n\n//   return (\n//     <Wrapper>\n//       <CalenderHead className='row'>\n//         <div className='col-8 d-flex justify-content-around align-items-center'>\n//           <Icon.ArrowLeftCircleFill onClick={prevMonth} type='button' />\n//           <p className='mb-0 fs-3'>\n//             <strong>\n//               {MONTHS[currentMonth]} {currentYear}\n//             </strong>\n//           </p>\n//           <Icon.ArrowRightCircleFill onClick={nextMonth} type='button' />\n//         </div>\n//         {/* <div className=\"col-4 d-flex justify-content-end border-start border-2\">\n//                   <button className=\"reminder-btn d-flex align-items-center position-relative\" onClick={toggelReminderModal}>\n//                       <span className=\"remd-num me-2\">{remindersArr.length}</span>\n//                       <Icon.Bell className=\"me-2\" />\n//                       <p className=\"mb-0\">Reminder</p>\n//                   </button>\n//                   {\n//                       reminderModal &&\n//                       <div className=\"modal\">\n//                           <div onClick={toggelReminderModal} className=\"overlay\">\n//                               <div className=\"remd-modal-content\" onClick={(e) => e.stopPropagation()}>\n//                                   <div className=\"d-flex justify-content-start form-heading align-items-center\">\n//                                       <div className=\"position-relative\">\n//                                           <Icon.Bell className=\"me-3 fs-2\" />\n//                                           <span className=\"remd-num-badge text-center\">{remindersArr.length}</span>\n//                                       </div>\n//                                       <h4 className=\"mb-0\">Reminder</h4>\n//                                   </div>\n//                                   <button type=\"button\" className=\"close-btn\" onClick={toggelReminderModal}><Icon.XLg /></button>\n//                                   <div className=\"modal-body\">\n//                                       {remindersArr.length > 0 ?\n//                                           (remindersArr.map((reminder, index) =>\n//                                               <div key={index} className=\"p-2 border-bottom border-2\">\n//                                                   <div className=\"d-flex justify-content-between \">\n//                                                       <div className=\"d-flex justify-content-center align-items-center\">\n//                                                           <Icon.Calendar3 className=\"me-3\" />\n//                                                           <p className=\"mb-0\">\"{reminder.title}\" event</p>\n//                                                       </div>\n//                                                       <small>starts in {convertMilliseconds(reminder.remainingTime)} minutes</small>\n//                                                   </div>\n//                                                   <div className=\"d-flex justify-content-between my-3\">\n//                                                       <div className=\"d-flex justify-content-start\">\n//                                                           <select className=\"form-select me-4 snooze-select\" aria-label=\"Default select example\">\n//                                                               <option value=\"\">-----snooze-----</option>\n\n//                                                               <option value=\"5\">5 min before</option>\n//                                                               <option value=\"10\">10 min before</option>\n//                                                               <option value=\"15\">15 min before</option>\n//                                                               <option value=\"20\">20 min before</option>\n//                                                               <option value=\"25\">25 min before</option>\n//                                                               <option value=\"30\">30 min before</option>\n\n//                                                           </select>\n//                                                           <button className=\"snooze-btn\" onClick={(e) => {\n//                                                               e.stopPropagation();\n//                                                               snoozeReminder(reminder, e.target.parentNode.querySelector('.snooze-select').value);\n//                                                               ;\n//                                                           }}>Snooze</button>\n//                                                       </div>\n//                                                       <button className=\"dissmiss-btn\" onClick={(e) => {\n//                                                           e.stopPropagation();\n//                                                           dismissReminder(reminder);\n//                                                       }}>Dissmiss</button>\n//                                                   </div>\n//                                               </div>\n//                                           )) :\n//                                           (\n//                                               <div className=\"w-100 h-100 d-flex justify-content-center align-items-center\">\n//                                                   <p>No reminders yet</p>\n//                                               </div>\n//                                           )\n//                                       }\n//                                   </div>\n//                               </div>\n//                           </div>\n//                       </div>\n//                   }\n//               </div> */}\n//       </CalenderHead>\n//       <SevenColGrid>\n//         {getSortedDays(currentMonth, currentYear).map(day => (\n//           <HeadDay>\n//             <strong>{day}</strong>\n//           </HeadDay>\n//         ))}\n//       </SevenColGrid>\n//       <CalenderBody fourCol={DaysInMonth === 28}>\n//         {range(DaysInMonth).map(day => {\n//           return (\n//             <>\n//               <StyledDay\n//                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\n//                 onClick={e => {\n//                   setSelectedDay(getDateobj(day, currentMonth, currentYear))\n//                   setEventForm(null)\n//                   setShowDeleteButton(false)\n//                   toggelModal()\n//                 }}\n//                 active={areDatesTheSame(\n//                   new Date(),\n//                   getDateobj(day, currentMonth, currentYear)\n//                 )}\n//               >\n//                 <div className='mb-2'>\n//                   <strong className='current-day'>{day}</strong>\n//                 </div>\n//                 {eventsArr.map(\n//                   event =>\n//                     areDatesTheSame(\n//                       getDateobj(day, currentMonth, currentYear),\n//                       event.date\n//                     ) && (\n//                       <StyledEvent color={event.color}>\n//                         <span\n//                           className='w-100 text-start'\n//                           type='button'\n//                           onClick={e => {\n//                             e.stopPropagation()\n//                             setSelectedDay(\n//                               getDateobj(day, currentMonth, currentYear)\n//                             )\n//                             loadData(event)\n//                             setShowDeleteButton(true)\n//                             toggelModal()\n//                           }}\n//                         >\n//                           {event.title}\n//                         </span>\n//                       </StyledEvent>\n//                     )\n//                 )}\n//               </StyledDay>\n//             </>\n//           )\n//         })}\n//       </CalenderBody>\n//       {Modal && (\n//         <div className='modal'>\n//           <div\n//             onClick={() => {\n//               setSelectedEvent(null)\n//               toggelModal()\n//             }}\n//             className='overlay'\n//           >\n//             <div className='modal-content' onClick={e => e.stopPropagation()}>\n//               <h4 className='form-heading'>Event</h4>\n//               <button\n//                 type='button'\n//                 className='close-btn'\n//                 onClick={() => {\n//                   setSelectedEvent(null)\n//                   toggelModal()\n//                 }}\n//               >\n//                 <Icon.XLg />\n//               </button>\n//               {showDeleteButton && (\n//                 <button\n//                   className='delete-btn'\n//                   onClick={e => {\n//                     e.stopPropagation()\n//                     onRemoveEvent(eventForm)\n//                   }}\n//                 >\n//                   Delete\n//                 </button>\n//               )}\n//               <form>\n//                 <div className='form-group mb-3'>\n//                   <label className='form-label'>Title</label>\n//                   <input\n//                     className='form-control'\n//                     value={eventForm ? eventForm.title : ''}\n//                     onChange={e =>\n//                       setEventForm({ ...eventForm, title: e.target.value })\n//                     }\n//                     type='text'\n//                     placeholder='Event Tilte'\n//                     required\n//                   ></input>\n//                 </div>\n\n//                 <div className='form-group mb-3'>\n//                   <label className='form-label'>Event Time</label>\n//                   <input\n//                     className='form-control'\n//                     value={eventForm ? eventForm.eventTime : ''}\n//                     onChange={e =>\n//                       setEventForm({ ...eventForm, eventTime: e.target.value })\n//                     }\n//                     type='text'\n//                     placeholder='hh:mm'\n//                     required\n//                   ></input>\n//                 </div>\n//                 <div className='form-group mb-3'>\n//                   <label className='form-label'>Reminder Time</label>\n//                   <select\n//                     className='form-control form-select me-4 reminder-select'\n//                     aria-label='Default select example'\n//                     ref={reminderSelectRef}\n//                   >\n//                     <option value=''>REMINDER Time</option>\n//                     <option value='5'>5 min before</option>\n//                     <option value='10'>10 min before</option>\n//                     <option value='15'>15 min before</option>\n//                     <option value='20'>20 min before</option>\n//                     <option value='25'>25 min before</option>\n//                     <option value='30'>30 min before</option>\n//                     <option value='60'>1 hr before</option>\n//                     <option value='1440'>1 day before</option>\n//                     <option value='10080'>1 week before</option>\n//                   </select>\n//                   {/* <input className=\"form-control\" value={eventForm ? eventForm.reminderTime : \"\"} onChange={(e) => setEventForm({ ...eventForm, reminderTime: e.target.value })} type=\"text\" placeholder=\"hh:mm\" required></input> */}\n//                 </div>\n\n//                 <div className='d-flex justify-content-end'>\n//                   <button\n//                     className='save-event'\n//                     onClick={e => {\n//                       e.stopPropagation()\n//                       console.log()\n//                       onAddEditEvent(\n//                         e,\n//                         eventForm,\n//                         selectedDay,\n//                         reminderSelectRef.current.value\n//                       )\n//                     }}\n//                   >\n//                     Save\n//                   </button>\n//                 </div>\n//               </form>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </Wrapper>\n//   )\n// }\n_s(Calender, \"k6sld/nJsLn+yGu8Sk7ivfNYW5c=\");\n_c = Calender;\nvar _c;\n$RefreshReg$(_c, \"Calender\");","map":{"version":3,"names":["Wrapper","CalenderHead","SevenColGrid","HeadDay","CalenderBody","StyledDay","StyledEvent","Icon","Days","MONTHS","range","getDaysInMonth","getSortedDays","areDatesTheSame","getDateobj","useState","useEffect","EventModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Calender","_ref","_s","startingDate","eventsArr","addEvent","editEvent","removeEvent","currentMonth","setCurrentMonth","getMonth","currentYear","setCurrentYear","getFullYear","DaysInMonth","selectedDay","setSelectedDay","Date","getDay","selectedEvent","setSelectedEvent","eventForm","setEventForm","title","time","reminderTime","showDeleteButton","setShowDeleteButton","Modal","setModal","toggelModal","nextMonth","prev","prevMonth","loadData","thisevent","eventOnDay","find","event","date","onAddEditEvent","data","preventDefault","onRemoveEvent","eventToBeDel","children","ArrowLeftCircleFill","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","ArrowRightCircleFill","map","day","fourCol","dateObj","isCurrentDate","eventsOnDate","filter","e","active","type","stopPropagation","XLg","value","onChange","target","disabled","style","opacity","cursor","_c","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/Calender/calender.js"],"sourcesContent":["import {\r\n  Wrapper,\r\n  CalenderHead,\r\n  SevenColGrid,\r\n  HeadDay,\r\n  CalenderBody,\r\n  StyledDay,\r\n  StyledEvent\r\n} from './styled'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport * as Icon from 'react-bootstrap-icons'\r\nimport { Days, MONTHS } from './const'\r\nimport {\r\n  range,\r\n  getDaysInMonth,\r\n  getSortedDays,\r\n  areDatesTheSame,\r\n  getDateobj\r\n} from './util'\r\nimport { useState, useEffect } from 'react'\r\nimport { EventModal } from './addEventModal/addEventModal'\r\nimport './addEventModal/addEventModal.css'\r\n\r\nexport const Calender = ({\r\n  startingDate,\r\n  eventsArr,\r\n  addEvent,\r\n  editEvent,\r\n  removeEvent\r\n}) => {\r\n  const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth())\r\n  const [currentYear, setCurrentYear] = useState(startingDate.getFullYear())\r\n  const DaysInMonth = getDaysInMonth(currentMonth, currentYear)\r\n  const [selectedDay, setSelectedDay] = useState(new Date().getDay())\r\n  const [selectedEvent, setSelectedEvent] = useState(null)\r\n  const [eventForm, setEventForm] = useState({\r\n    title: '',\r\n    time: '',\r\n    reminderTime: '' // Add the 'reminderTime' property\r\n  });\r\n  \r\n\r\n  const [showDeleteButton, setShowDeleteButton] = useState(false)\r\n\r\n  const [Modal, setModal] = useState(false)\r\n\r\n  const toggelModal = () => {\r\n    setModal(!Modal)\r\n  }\r\n\r\n  const nextMonth = () => {\r\n    if (currentMonth < 11) {\r\n      setCurrentMonth(prev => prev + 1)\r\n    } else {\r\n      setCurrentMonth(0)\r\n      setCurrentYear(prev => prev + 1)\r\n    }\r\n  }\r\n\r\n  const prevMonth = () => {\r\n    if (currentMonth > 0) {\r\n      setCurrentMonth(prev => prev - 1)\r\n    } else {\r\n      setCurrentMonth(11)\r\n      setCurrentYear(prev => prev - 1)\r\n    }\r\n  }\r\n\r\n  const loadData = thisevent => {\r\n    const eventOnDay = eventsArr.find(\r\n      event =>\r\n        event.title === thisevent.title &&\r\n        event.date === thisevent.date &&\r\n        event.reminderTime === thisevent.reminderTime\r\n    )\r\n    setEventForm(eventOnDay || null)\r\n    setSelectedEvent(eventOnDay || null)\r\n  }\r\n\r\n  const onAddEditEvent = (event, data, selectedDay) => {\r\n    event.preventDefault()\r\n    if (selectedEvent) {\r\n      editEvent(selectedEvent, data)\r\n      setSelectedEvent(null)\r\n    } else {\r\n      addEvent(data, selectedDay)\r\n    }\r\n    toggelModal()\r\n    setEventForm(null)\r\n  }\r\n\r\n  const onRemoveEvent = eventToBeDel => {\r\n    removeEvent(eventToBeDel)\r\n    toggelModal()\r\n    setEventForm(null)\r\n    setSelectedEvent(null)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <CalenderHead>\r\n        <Icon.ArrowLeftCircleFill onClick={prevMonth} />\r\n        <p className='m-0'>\r\n          {MONTHS[currentMonth]} {currentYear}\r\n        </p>\r\n        <Icon.ArrowRightCircleFill onClick={nextMonth} />\r\n      </CalenderHead>\r\n      <SevenColGrid>\r\n        {getSortedDays(currentMonth, currentYear).map(day => (\r\n          <HeadDay>{day}</HeadDay>\r\n        ))}\r\n      </SevenColGrid>\r\n      <CalenderBody fourCol={DaysInMonth === 28}>\r\n        {range(DaysInMonth).map(day => {\r\n          const dateObj = getDateobj(day, currentMonth, currentYear)\r\n          const isCurrentDate = areDatesTheSame(new Date(), dateObj)\r\n          const eventsOnDate = eventsArr.filter(event =>\r\n            areDatesTheSame(dateObj, event.date)\r\n          )\r\n          return (\r\n            <>\r\n              <StyledDay\r\n                onClick={e => {\r\n                  setSelectedDay(getDateobj(day, currentMonth, currentYear))\r\n                  setEventForm(null)\r\n                  setShowDeleteButton(false)\r\n                  setSelectedEvent(null) // Clear the selectedEvent state for new events\r\n                  toggelModal()\r\n                }}\r\n                active={areDatesTheSame(\r\n                  new Date(),\r\n                  getDateobj(day, currentMonth, currentYear)\r\n                )}\r\n              >\r\n                <p>{day}</p>\r\n                {eventsArr.map(\r\n                  event =>\r\n                    areDatesTheSame(\r\n                      getDateobj(day, currentMonth, currentYear),\r\n                      event.date\r\n                    ) && (\r\n                      <StyledEvent>\r\n                        <span\r\n                          className='w-100 text-start'\r\n                          type='button'\r\n                          onClick={e => {\r\n                            e.stopPropagation()\r\n                            loadData(event)\r\n                            setShowDeleteButton(true)\r\n                            toggelModal()\r\n                          }}\r\n                        >\r\n                          {event.title}\r\n                        </span>\r\n                      </StyledEvent>\r\n                    )\r\n                )}\r\n              </StyledDay>\r\n              {Modal && (\r\n                <div className='modal'>\r\n                  <div onClick={toggelModal} className='overlay'>\r\n                    <div\r\n                      className='modal-content'\r\n                      onClick={e => e.stopPropagation()}\r\n                    >\r\n                      <h4 className='form-heading'>\r\n                        {selectedEvent ? 'Edit Event' : 'Add Event'}\r\n                      </h4>\r\n\r\n                      <button\r\n                        type='button'\r\n                        className='close-btn'\r\n                        onClick={toggelModal}\r\n                      >\r\n                        <Icon.XLg />\r\n                      </button>\r\n\r\n                      <form>\r\n                      <div className='form-group mb-3'>\r\n    <h4>\r\n      <label className='form-label'>Title</label>\r\n    </h4>\r\n    <input\r\n      type='text'\r\n      className='form-control'\r\n      value={eventForm?.title || ''}\r\n      onChange={e =>\r\n        setEventForm({\r\n          ...eventForm,\r\n          title: e.target.value\r\n        })\r\n      }\r\n    />\r\n  </div>\r\n\r\n  <div className='form-group mb-3'>\r\n    <h4>\r\n      <label className='form-label'>Time</label>\r\n    </h4>\r\n    <input\r\n      type='time'\r\n      className='form-control'\r\n      value={eventForm?.time || ''}\r\n      onChange={e =>\r\n        setEventForm({\r\n          ...eventForm,\r\n          time: e.target.value\r\n        })\r\n      }\r\n    />\r\n  </div>\r\n\r\n                        {/* ... */}\r\n                        <div className='d-flex justify-content-end'>\r\n                          <button\r\n                            className='save-event'\r\n                            disabled={!eventForm?.title} // Disable the button if the title is not filled\r\n                            style={{ opacity: eventForm?.title ? 1 : 0.5, cursor: eventForm?.title ? 'pointer' : 'not-allowed' }}\r\n                            onClick={e => {\r\n                              e.stopPropagation()\r\n                              onAddEditEvent(e, eventForm, selectedDay)\r\n                            }}\r\n                          >\r\n                            Save\r\n                          </button>\r\n\r\n                          {showDeleteButton && (\r\n                            <button\r\n                              className='delete-btn'\r\n                              onClick={e => {\r\n                                e.stopPropagation()\r\n                                onRemoveEvent(eventForm)\r\n                              }}\r\n                            >\r\n                              Delete\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </>\r\n          )\r\n        })}\r\n      </CalenderBody>\r\n    </Wrapper>\r\n  )\r\n}\r\n// import {\r\n//   Wrapper,\r\n//   CalenderHead,\r\n//   SevenColGrid,\r\n//   HeadDay,\r\n//   CalenderBody,\r\n//   StyledDay,\r\n//   StyledEvent\r\n// } from './styled'\r\n// import 'bootstrap/dist/css/bootstrap.min.css'\r\n// import * as Icon from 'react-bootstrap-icons'\r\n// import { Days, MONTHS } from './const'\r\n// import {\r\n//   range,\r\n//   getDaysInMonth,\r\n//   getSortedDays,\r\n//   areDatesTheSame,\r\n//   getDateobj\r\n// } from './util'\r\n// import { useState, useEffect, useRef } from 'react'\r\n// import { EventModal } from './addEventModal/addEventModal'\r\n// import './addEventModal/addEventModal.css'\r\n\r\n// export const Calender = ({\r\n//   startingDate,\r\n//   eventsArr,\r\n//   addEvent,\r\n//   editEvent,\r\n//   removeEvent,\r\n//   remindersArr,\r\n//   removeReminder,\r\n//   snoozeForReminder\r\n// }) => {\r\n//   const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth())\r\n//   const [currentYear, setCurrentYear] = useState(startingDate.getFullYear())\r\n//   const DaysInMonth = getDaysInMonth(currentMonth, currentYear)\r\n//   const [selectedDay, setSelectedDay] = useState(new Date().getDay())\r\n//   const [selectedEvent, setSelectedEvent] = useState(null)\r\n//   const [eventForm, setEventForm] = useState(null)\r\n//   const [reminderModal, setReminderModal] = useState(false)\r\n//   const [showDeleteButton, setShowDeleteButton] = useState(false)\r\n//   const reminderSelectRef = useRef(null)\r\n\r\n//   const [Modal, setModal] = useState(false)\r\n\r\n//   const toggelModal = () => {\r\n//     setModal(!Modal)\r\n//   }\r\n\r\n//   const toggelReminderModal = () => {\r\n//     setReminderModal(!reminderModal)\r\n//   }\r\n\r\n//   const nextMonth = () => {\r\n//     if (currentMonth < 11) {\r\n//       setCurrentMonth(prev => prev + 1)\r\n//     } else {\r\n//       setCurrentMonth(0)\r\n//       setCurrentYear(prev => prev + 1)\r\n//     }\r\n//   }\r\n\r\n//   const prevMonth = () => {\r\n//     if (currentMonth > 0) {\r\n//       setCurrentMonth(prev => prev - 1)\r\n//     } else {\r\n//       setCurrentMonth(11)\r\n//       setCurrentYear(prev => prev - 1)\r\n//     }\r\n//   }\r\n\r\n//   const loadData = thisevent => {\r\n//     const eventOnDay = eventsArr.find(\r\n//       event =>\r\n//         event.title === thisevent.title &&\r\n//         event.date === thisevent.date &&\r\n//         event.reminderTime === thisevent.reminderTime\r\n//     )\r\n//     setEventForm(eventOnDay || null)\r\n//     setSelectedEvent(eventOnDay)\r\n//   }\r\n\r\n//   const onAddEditEvent = (event, data, selectedDay, reminderVal) => {\r\n//     event.preventDefault()\r\n\r\n//     const [eventHours, eventMinutes] = data.eventTime.split(':').map(Number)\r\n//     const eventTime = new Date(\r\n//       selectedDay.getFullYear(), // Year\r\n//       selectedDay.getMonth(), // Month (0-based)\r\n//       selectedDay.getDate() // Day\r\n//     )\r\n//     eventTime.setHours(eventHours)\r\n//     eventTime.setMinutes(eventMinutes)\r\n\r\n//     const reminderTimeDate = new Date(eventTime.getTime() - reminderVal * 60000)\r\n//     if (reminderVal != '') {\r\n//       if (reminderTimeDate < new Date()) {\r\n//         alert('Please select reminder value greater than the current time!!')\r\n//       } else {\r\n//         if (selectedEvent) {\r\n//           editEvent(selectedEvent, data, selectedDay, reminderTimeDate)\r\n//           setSelectedEvent(null)\r\n//         } else {\r\n//           addEvent(data, selectedDay, reminderTimeDate)\r\n//         }\r\n//         toggelModal()\r\n//         setEventForm(null)\r\n//       }\r\n//     } else {\r\n//       alert('Please select reminder value!!')\r\n//     }\r\n//   }\r\n\r\n//   const onRemoveEvent = eventToBeDel => {\r\n//     removeEvent(eventToBeDel)\r\n//     toggelModal()\r\n//     setEventForm(null)\r\n//     setSelectedEvent(null)\r\n//   }\r\n\r\n//   const dismissReminder = reminder => {\r\n//     removeReminder(reminder)\r\n//   }\r\n\r\n//   const convertMilliseconds = milliseconds => {\r\n//     const seconds = Math.floor(milliseconds / 1000)\r\n//     const minutes = Math.floor(seconds / 60)\r\n//     const hours = Math.floor(minutes / 60)\r\n//     const days = Math.floor(hours / 24)\r\n//     const remainingHours = hours % 24\r\n//     const remainingMinutes = minutes % 60\r\n\r\n//     let result = ''\r\n\r\n//     if (days > 0) {\r\n//       result += `${days} day(s) `\r\n//     }\r\n//     if (remainingHours > 0) {\r\n//       result += `${remainingHours} hr `\r\n//     }\r\n//     if (remainingMinutes > 0) {\r\n//       result += `${remainingMinutes} min`\r\n//     }\r\n\r\n//     return result.trim()\r\n//   }\r\n\r\n//   // moment library\r\n\r\n//   const snoozeReminder = (reminder, snoozeVal) => {\r\n//     // var snoozeValinmillisec;\r\n//     const eventTime = new Date(\r\n//       parseInt(reminder.eventFullDate.slice(0, 4)),\r\n//       parseInt(reminder.eventFullDate.slice(5, 7)) - 1,\r\n//       parseInt(reminder.eventFullDate.slice(8, 10)),\r\n//       parseInt(reminder.eventFullDate.slice(11, 13)),\r\n//       parseInt(reminder.eventFullDate.slice(14, 16))\r\n//     )\r\n\r\n//     const snoozeTime = new Date(eventTime.getTime() - snoozeVal * 60000)\r\n//     // if(snoozeTime > new Date()){\r\n\r\n//     //     console.log(snoozeTime)\r\n//     // }\r\n\r\n//     if (snoozeVal != '') {\r\n//       // snoozeValinmillisec = parseInt(snoozeVal) * 60000;\r\n//       if (snoozeTime < new Date()) {\r\n//         alert('not possible')\r\n//       } else {\r\n//         // alert(\"all ok\");\r\n//         snoozeForReminder(reminder, snoozeTime)\r\n//         toggelReminderModal()\r\n//       }\r\n//     } else {\r\n//       alert('please select snooze val!')\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <Wrapper>\r\n//       <CalenderHead className='row'>\r\n//         <div className='col-8 d-flex justify-content-around align-items-center'>\r\n//           <Icon.ArrowLeftCircleFill onClick={prevMonth} type='button' />\r\n//           <p className='mb-0 fs-3'>\r\n//             <strong>\r\n//               {MONTHS[currentMonth]} {currentYear}\r\n//             </strong>\r\n//           </p>\r\n//           <Icon.ArrowRightCircleFill onClick={nextMonth} type='button' />\r\n//         </div>\r\n//         {/* <div className=\"col-4 d-flex justify-content-end border-start border-2\">\r\n//                   <button className=\"reminder-btn d-flex align-items-center position-relative\" onClick={toggelReminderModal}>\r\n//                       <span className=\"remd-num me-2\">{remindersArr.length}</span>\r\n//                       <Icon.Bell className=\"me-2\" />\r\n//                       <p className=\"mb-0\">Reminder</p>\r\n//                   </button>\r\n//                   {\r\n//                       reminderModal &&\r\n//                       <div className=\"modal\">\r\n//                           <div onClick={toggelReminderModal} className=\"overlay\">\r\n//                               <div className=\"remd-modal-content\" onClick={(e) => e.stopPropagation()}>\r\n//                                   <div className=\"d-flex justify-content-start form-heading align-items-center\">\r\n//                                       <div className=\"position-relative\">\r\n//                                           <Icon.Bell className=\"me-3 fs-2\" />\r\n//                                           <span className=\"remd-num-badge text-center\">{remindersArr.length}</span>\r\n//                                       </div>\r\n//                                       <h4 className=\"mb-0\">Reminder</h4>\r\n//                                   </div>\r\n//                                   <button type=\"button\" className=\"close-btn\" onClick={toggelReminderModal}><Icon.XLg /></button>\r\n//                                   <div className=\"modal-body\">\r\n//                                       {remindersArr.length > 0 ?\r\n//                                           (remindersArr.map((reminder, index) =>\r\n//                                               <div key={index} className=\"p-2 border-bottom border-2\">\r\n//                                                   <div className=\"d-flex justify-content-between \">\r\n//                                                       <div className=\"d-flex justify-content-center align-items-center\">\r\n//                                                           <Icon.Calendar3 className=\"me-3\" />\r\n//                                                           <p className=\"mb-0\">\"{reminder.title}\" event</p>\r\n//                                                       </div>\r\n//                                                       <small>starts in {convertMilliseconds(reminder.remainingTime)} minutes</small>\r\n//                                                   </div>\r\n//                                                   <div className=\"d-flex justify-content-between my-3\">\r\n//                                                       <div className=\"d-flex justify-content-start\">\r\n//                                                           <select className=\"form-select me-4 snooze-select\" aria-label=\"Default select example\">\r\n//                                                               <option value=\"\">-----snooze-----</option>\r\n                                                             \r\n//                                                               <option value=\"5\">5 min before</option>\r\n//                                                               <option value=\"10\">10 min before</option>\r\n//                                                               <option value=\"15\">15 min before</option>\r\n//                                                               <option value=\"20\">20 min before</option>\r\n//                                                               <option value=\"25\">25 min before</option>\r\n//                                                               <option value=\"30\">30 min before</option>\r\n                                                             \r\n//                                                           </select>\r\n//                                                           <button className=\"snooze-btn\" onClick={(e) => {\r\n//                                                               e.stopPropagation();\r\n//                                                               snoozeReminder(reminder, e.target.parentNode.querySelector('.snooze-select').value);\r\n//                                                               ;\r\n//                                                           }}>Snooze</button>\r\n//                                                       </div>\r\n//                                                       <button className=\"dissmiss-btn\" onClick={(e) => {\r\n//                                                           e.stopPropagation();\r\n//                                                           dismissReminder(reminder);\r\n//                                                       }}>Dissmiss</button>\r\n//                                                   </div>\r\n//                                               </div>\r\n//                                           )) :\r\n//                                           (\r\n//                                               <div className=\"w-100 h-100 d-flex justify-content-center align-items-center\">\r\n//                                                   <p>No reminders yet</p>\r\n//                                               </div>\r\n//                                           )\r\n//                                       }\r\n//                                   </div>\r\n//                               </div>\r\n//                           </div>\r\n//                       </div>\r\n//                   }\r\n//               </div> */}\r\n//       </CalenderHead>\r\n//       <SevenColGrid>\r\n//         {getSortedDays(currentMonth, currentYear).map(day => (\r\n//           <HeadDay>\r\n//             <strong>{day}</strong>\r\n//           </HeadDay>\r\n//         ))}\r\n//       </SevenColGrid>\r\n//       <CalenderBody fourCol={DaysInMonth === 28}>\r\n//         {range(DaysInMonth).map(day => {\r\n//           return (\r\n//             <>\r\n//               <StyledDay\r\n//                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\r\n//                 onClick={e => {\r\n//                   setSelectedDay(getDateobj(day, currentMonth, currentYear))\r\n//                   setEventForm(null)\r\n//                   setShowDeleteButton(false)\r\n//                   toggelModal()\r\n//                 }}\r\n//                 active={areDatesTheSame(\r\n//                   new Date(),\r\n//                   getDateobj(day, currentMonth, currentYear)\r\n//                 )}\r\n//               >\r\n//                 <div className='mb-2'>\r\n//                   <strong className='current-day'>{day}</strong>\r\n//                 </div>\r\n//                 {eventsArr.map(\r\n//                   event =>\r\n//                     areDatesTheSame(\r\n//                       getDateobj(day, currentMonth, currentYear),\r\n//                       event.date\r\n//                     ) && (\r\n//                       <StyledEvent color={event.color}>\r\n//                         <span\r\n//                           className='w-100 text-start'\r\n//                           type='button'\r\n//                           onClick={e => {\r\n//                             e.stopPropagation()\r\n//                             setSelectedDay(\r\n//                               getDateobj(day, currentMonth, currentYear)\r\n//                             )\r\n//                             loadData(event)\r\n//                             setShowDeleteButton(true)\r\n//                             toggelModal()\r\n//                           }}\r\n//                         >\r\n//                           {event.title}\r\n//                         </span>\r\n//                       </StyledEvent>\r\n//                     )\r\n//                 )}\r\n//               </StyledDay>\r\n//             </>\r\n//           )\r\n//         })}\r\n//       </CalenderBody>\r\n//       {Modal && (\r\n//         <div className='modal'>\r\n//           <div\r\n//             onClick={() => {\r\n//               setSelectedEvent(null)\r\n//               toggelModal()\r\n//             }}\r\n//             className='overlay'\r\n//           >\r\n//             <div className='modal-content' onClick={e => e.stopPropagation()}>\r\n//               <h4 className='form-heading'>Event</h4>\r\n//               <button\r\n//                 type='button'\r\n//                 className='close-btn'\r\n//                 onClick={() => {\r\n//                   setSelectedEvent(null)\r\n//                   toggelModal()\r\n//                 }}\r\n//               >\r\n//                 <Icon.XLg />\r\n//               </button>\r\n//               {showDeleteButton && (\r\n//                 <button\r\n//                   className='delete-btn'\r\n//                   onClick={e => {\r\n//                     e.stopPropagation()\r\n//                     onRemoveEvent(eventForm)\r\n//                   }}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               )}\r\n//               <form>\r\n//                 <div className='form-group mb-3'>\r\n//                   <label className='form-label'>Title</label>\r\n//                   <input\r\n//                     className='form-control'\r\n//                     value={eventForm ? eventForm.title : ''}\r\n//                     onChange={e =>\r\n//                       setEventForm({ ...eventForm, title: e.target.value })\r\n//                     }\r\n//                     type='text'\r\n//                     placeholder='Event Tilte'\r\n//                     required\r\n//                   ></input>\r\n//                 </div>\r\n\r\n//                 <div className='form-group mb-3'>\r\n//                   <label className='form-label'>Event Time</label>\r\n//                   <input\r\n//                     className='form-control'\r\n//                     value={eventForm ? eventForm.eventTime : ''}\r\n//                     onChange={e =>\r\n//                       setEventForm({ ...eventForm, eventTime: e.target.value })\r\n//                     }\r\n//                     type='text'\r\n//                     placeholder='hh:mm'\r\n//                     required\r\n//                   ></input>\r\n//                 </div>\r\n//                 <div className='form-group mb-3'>\r\n//                   <label className='form-label'>Reminder Time</label>\r\n//                   <select\r\n//                     className='form-control form-select me-4 reminder-select'\r\n//                     aria-label='Default select example'\r\n//                     ref={reminderSelectRef}\r\n//                   >\r\n//                     <option value=''>REMINDER Time</option>\r\n//                     <option value='5'>5 min before</option>\r\n//                     <option value='10'>10 min before</option>\r\n//                     <option value='15'>15 min before</option>\r\n//                     <option value='20'>20 min before</option>\r\n//                     <option value='25'>25 min before</option>\r\n//                     <option value='30'>30 min before</option>\r\n//                     <option value='60'>1 hr before</option>\r\n//                     <option value='1440'>1 day before</option>\r\n//                     <option value='10080'>1 week before</option>\r\n//                   </select>\r\n//                   {/* <input className=\"form-control\" value={eventForm ? eventForm.reminderTime : \"\"} onChange={(e) => setEventForm({ ...eventForm, reminderTime: e.target.value })} type=\"text\" placeholder=\"hh:mm\" required></input> */}\r\n//                 </div>\r\n\r\n//                 <div className='d-flex justify-content-end'>\r\n//                   <button\r\n//                     className='save-event'\r\n//                     onClick={e => {\r\n//                       e.stopPropagation()\r\n//                       console.log()\r\n//                       onAddEditEvent(\r\n//                         e,\r\n//                         eventForm,\r\n//                         selectedDay,\r\n//                         reminderSelectRef.current.value\r\n//                       )\r\n//                     }}\r\n//                   >\r\n//                     Save\r\n//                   </button>\r\n//                 </div>\r\n//               </form>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </Wrapper>\r\n//   )\r\n// }\r\n"],"mappings":";;AAAA,SACEA,OAAO,EACPC,YAAY,EACZC,YAAY,EACZC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,WAAW,QACN,UAAU;AACjB,OAAO,sCAAsC;AAC7C,OAAO,KAAKC,IAAI,MAAM,uBAAuB;AAC7C,SAASC,IAAI,EAAEC,MAAM,QAAQ,SAAS;AACtC,SACEC,KAAK,EACLC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,UAAU,QACL,QAAQ;AACf,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,OAAO,mCAAmC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAMlB;EAAAC,EAAA;EAAA,IANmB;IACvBC,YAAY;IACZC,SAAS;IACTC,QAAQ;IACRC,SAAS;IACTC;EACF,CAAC,GAAAN,IAAA;EACC,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAACU,YAAY,CAACO,QAAQ,CAAC,CAAC,CAAC;EACzE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAACU,YAAY,CAACU,WAAW,CAAC,CAAC,CAAC;EAC1E,MAAMC,WAAW,GAAGzB,cAAc,CAACmB,YAAY,EAAEG,WAAW,CAAC;EAC7D,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,IAAIwB,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;EACnE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC;IACzC8B,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,EAAE;IACRC,YAAY,EAAE,EAAE,CAAC;EACnB,CAAC,CAAC;;EAGF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMqC,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAC,CAACD,KAAK,CAAC;EAClB,CAAC;EAED,MAAMG,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIvB,YAAY,GAAG,EAAE,EAAE;MACrBC,eAAe,CAACuB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACnC,CAAC,MAAM;MACLvB,eAAe,CAAC,CAAC,CAAC;MAClBG,cAAc,CAACoB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAClC;EACF,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIzB,YAAY,GAAG,CAAC,EAAE;MACpBC,eAAe,CAACuB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACnC,CAAC,MAAM;MACLvB,eAAe,CAAC,EAAE,CAAC;MACnBG,cAAc,CAACoB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAClC;EACF,CAAC;EAED,MAAME,QAAQ,GAAGC,SAAS,IAAI;IAC5B,MAAMC,UAAU,GAAGhC,SAAS,CAACiC,IAAI,CAC/BC,KAAK,IACHA,KAAK,CAACf,KAAK,KAAKY,SAAS,CAACZ,KAAK,IAC/Be,KAAK,CAACC,IAAI,KAAKJ,SAAS,CAACI,IAAI,IAC7BD,KAAK,CAACb,YAAY,KAAKU,SAAS,CAACV,YACrC,CAAC;IACDH,YAAY,CAACc,UAAU,IAAI,IAAI,CAAC;IAChChB,gBAAgB,CAACgB,UAAU,IAAI,IAAI,CAAC;EACtC,CAAC;EAED,MAAMI,cAAc,GAAGA,CAACF,KAAK,EAAEG,IAAI,EAAE1B,WAAW,KAAK;IACnDuB,KAAK,CAACI,cAAc,CAAC,CAAC;IACtB,IAAIvB,aAAa,EAAE;MACjBb,SAAS,CAACa,aAAa,EAAEsB,IAAI,CAAC;MAC9BrB,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLf,QAAQ,CAACoC,IAAI,EAAE1B,WAAW,CAAC;IAC7B;IACAe,WAAW,CAAC,CAAC;IACbR,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMqB,aAAa,GAAGC,YAAY,IAAI;IACpCrC,WAAW,CAACqC,YAAY,CAAC;IACzBd,WAAW,CAAC,CAAC;IACbR,YAAY,CAAC,IAAI,CAAC;IAClBF,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,oBACEvB,OAAA,CAACnB,OAAO;IAAAmE,QAAA,gBACNhD,OAAA,CAAClB,YAAY;MAAAkE,QAAA,gBACXhD,OAAA,CAACZ,IAAI,CAAC6D,mBAAmB;QAACC,OAAO,EAAEd;MAAU;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChDtD,OAAA;QAAGuD,SAAS,EAAC,KAAK;QAAAP,QAAA,GACf1D,MAAM,CAACqB,YAAY,CAAC,EAAC,GAAC,EAACG,WAAW;MAAA;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACJtD,OAAA,CAACZ,IAAI,CAACoE,oBAAoB;QAACN,OAAO,EAAEhB;MAAU;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eACftD,OAAA,CAACjB,YAAY;MAAAiE,QAAA,EACVvD,aAAa,CAACkB,YAAY,EAAEG,WAAW,CAAC,CAAC2C,GAAG,CAACC,GAAG,iBAC/C1D,OAAA,CAAChB,OAAO;QAAAgE,QAAA,EAAEU;MAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAU,CACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU,CAAC,eACftD,OAAA,CAACf,YAAY;MAAC0E,OAAO,EAAE1C,WAAW,KAAK,EAAG;MAAA+B,QAAA,EACvCzD,KAAK,CAAC0B,WAAW,CAAC,CAACwC,GAAG,CAACC,GAAG,IAAI;QAC7B,MAAME,OAAO,GAAGjE,UAAU,CAAC+D,GAAG,EAAE/C,YAAY,EAAEG,WAAW,CAAC;QAC1D,MAAM+C,aAAa,GAAGnE,eAAe,CAAC,IAAI0B,IAAI,CAAC,CAAC,EAAEwC,OAAO,CAAC;QAC1D,MAAME,YAAY,GAAGvD,SAAS,CAACwD,MAAM,CAACtB,KAAK,IACzC/C,eAAe,CAACkE,OAAO,EAAEnB,KAAK,CAACC,IAAI,CACrC,CAAC;QACD,oBACE1C,OAAA,CAAAE,SAAA;UAAA8C,QAAA,gBACEhD,OAAA,CAACd,SAAS;YACRgE,OAAO,EAAEc,CAAC,IAAI;cACZ7C,cAAc,CAACxB,UAAU,CAAC+D,GAAG,EAAE/C,YAAY,EAAEG,WAAW,CAAC,CAAC;cAC1DW,YAAY,CAAC,IAAI,CAAC;cAClBK,mBAAmB,CAAC,KAAK,CAAC;cAC1BP,gBAAgB,CAAC,IAAI,CAAC,EAAC;cACvBU,WAAW,CAAC,CAAC;YACf,CAAE;YACFgC,MAAM,EAAEvE,eAAe,CACrB,IAAI0B,IAAI,CAAC,CAAC,EACVzB,UAAU,CAAC+D,GAAG,EAAE/C,YAAY,EAAEG,WAAW,CAC3C,CAAE;YAAAkC,QAAA,gBAEFhD,OAAA;cAAAgD,QAAA,EAAIU;YAAG;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACX/C,SAAS,CAACkD,GAAG,CACZhB,KAAK,IACH/C,eAAe,CACbC,UAAU,CAAC+D,GAAG,EAAE/C,YAAY,EAAEG,WAAW,CAAC,EAC1C2B,KAAK,CAACC,IACR,CAAC,iBACC1C,OAAA,CAACb,WAAW;cAAA6D,QAAA,eACVhD,OAAA;gBACEuD,SAAS,EAAC,kBAAkB;gBAC5BW,IAAI,EAAC,QAAQ;gBACbhB,OAAO,EAAEc,CAAC,IAAI;kBACZA,CAAC,CAACG,eAAe,CAAC,CAAC;kBACnB9B,QAAQ,CAACI,KAAK,CAAC;kBACfX,mBAAmB,CAAC,IAAI,CAAC;kBACzBG,WAAW,CAAC,CAAC;gBACf,CAAE;gBAAAe,QAAA,EAEDP,KAAK,CAACf;cAAK;gBAAAyB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACR;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI,CAEnB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACQ,CAAC,EACXvB,KAAK,iBACJ/B,OAAA;YAAKuD,SAAS,EAAC,OAAO;YAAAP,QAAA,eACpBhD,OAAA;cAAKkD,OAAO,EAAEjB,WAAY;cAACsB,SAAS,EAAC,SAAS;cAAAP,QAAA,eAC5ChD,OAAA;gBACEuD,SAAS,EAAC,eAAe;gBACzBL,OAAO,EAAEc,CAAC,IAAIA,CAAC,CAACG,eAAe,CAAC,CAAE;gBAAAnB,QAAA,gBAElChD,OAAA;kBAAIuD,SAAS,EAAC,cAAc;kBAAAP,QAAA,EACzB1B,aAAa,GAAG,YAAY,GAAG;gBAAW;kBAAA6B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzC,CAAC,eAELtD,OAAA;kBACEkE,IAAI,EAAC,QAAQ;kBACbX,SAAS,EAAC,WAAW;kBACrBL,OAAO,EAAEjB,WAAY;kBAAAe,QAAA,eAErBhD,OAAA,CAACZ,IAAI,CAACgF,GAAG;oBAAAjB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACN,CAAC,eAETtD,OAAA;kBAAAgD,QAAA,gBACAhD,OAAA;oBAAKuD,SAAS,EAAC,iBAAiB;oBAAAP,QAAA,gBAClDhD,OAAA;sBAAAgD,QAAA,eACEhD,OAAA;wBAAOuD,SAAS,EAAC,YAAY;wBAAAP,QAAA,EAAC;sBAAK;wBAAAG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAO;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACzC,CAAC,eACLtD,OAAA;sBACEkE,IAAI,EAAC,MAAM;sBACXX,SAAS,EAAC,cAAc;sBACxBc,KAAK,EAAE,CAAA7C,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,KAAK,KAAI,EAAG;sBAC9B4C,QAAQ,EAAEN,CAAC,IACTvC,YAAY,CAAC;wBACX,GAAGD,SAAS;wBACZE,KAAK,EAAEsC,CAAC,CAACO,MAAM,CAACF;sBAClB,CAAC;oBACF;sBAAAlB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACF,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACC,CAAC,eAENtD,OAAA;oBAAKuD,SAAS,EAAC,iBAAiB;oBAAAP,QAAA,gBAC9BhD,OAAA;sBAAAgD,QAAA,eACEhD,OAAA;wBAAOuD,SAAS,EAAC,YAAY;wBAAAP,QAAA,EAAC;sBAAI;wBAAAG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAO;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACxC,CAAC,eACLtD,OAAA;sBACEkE,IAAI,EAAC,MAAM;sBACXX,SAAS,EAAC,cAAc;sBACxBc,KAAK,EAAE,CAAA7C,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEG,IAAI,KAAI,EAAG;sBAC7B2C,QAAQ,EAAEN,CAAC,IACTvC,YAAY,CAAC;wBACX,GAAGD,SAAS;wBACZG,IAAI,EAAEqC,CAAC,CAACO,MAAM,CAACF;sBACjB,CAAC;oBACF;sBAAAlB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACF,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACC,CAAC,eAGgBtD,OAAA;oBAAKuD,SAAS,EAAC,4BAA4B;oBAAAP,QAAA,gBACzChD,OAAA;sBACEuD,SAAS,EAAC,YAAY;sBACtBiB,QAAQ,EAAE,EAAChD,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEE,KAAK,CAAC,CAAC;sBAAA;sBAC7B+C,KAAK,EAAE;wBAAEC,OAAO,EAAElD,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEE,KAAK,GAAG,CAAC,GAAG,GAAG;wBAAEiD,MAAM,EAAEnD,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEE,KAAK,GAAG,SAAS,GAAG;sBAAc,CAAE;sBACrGwB,OAAO,EAAEc,CAAC,IAAI;wBACZA,CAAC,CAACG,eAAe,CAAC,CAAC;wBACnBxB,cAAc,CAACqB,CAAC,EAAExC,SAAS,EAAEN,WAAW,CAAC;sBAC3C,CAAE;sBAAA8B,QAAA,EACH;oBAED;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,EAERzB,gBAAgB,iBACf7B,OAAA;sBACEuD,SAAS,EAAC,YAAY;sBACtBL,OAAO,EAAEc,CAAC,IAAI;wBACZA,CAAC,CAACG,eAAe,CAAC,CAAC;wBACnBrB,aAAa,CAACtB,SAAS,CAAC;sBAC1B,CAAE;sBAAAwB,QAAA,EACH;oBAED;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CACT;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACE,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACN;QAAA,eACD,CAAC;MAEP,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAjD,EAAA,CAzoBaF,QAAQ;AAAAyE,EAAA,GAARzE,QAAQ;AAAA,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}