{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [events, setEvents] = useState(() => {\n    const storedEvents = localStorage.getItem('events');\n    return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n  });\n\n  // const [events, setEvents] = useState(MockEvents);\n  // useEffect(() => {\n  //   localStorage.setItem('events', JSON.stringify(events));\n  //   events.forEach((event) => {\n  //     const [hours, minutes] = event.reminderTime.split(\":\").map(Number);\n  //     const reminderTime = new Date(\n  //       parseInt(event.date.slice(0, 4)),   // Year\n  //       parseInt(event.date.slice(5, 7)) - 1,   // Month (0-based)\n  //       parseInt(event.date.slice(8, 10)),  // Day\n  //       // parseInt(event.date.slice(14, 16)),  // Minutes\n  //       // parseInt(event.date.slice(17, 19)),  // Seconds\n  //       // parseInt(event.date.slice(20, 23))   // Milliseconds\n  //     );\n  //     reminderTime.setHours(hours);\n  //     reminderTime.setMinutes(minutes);\n\n  //     if (reminderTime > new Date()) {\n  //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n  //       setTimeout(() => {\n  //         console.log(event.title);\n  //       }, timeUntilEvent);\n  //     }\n  //   });\n  // }, [events]);\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const timeouts = []; // Array to store the setTimeout identifiers\n\n    events.forEach(event => {\n      // const [hours, minutes] = event.reminderTime.split(\":\").map(Number);\n      const reminderTime = new Date(parseInt(event.date.slice(0, 4)),\n      // Year\n      parseInt(event.date.slice(5, 7)) - 1,\n      // Month (0-based)\n      parseInt(event.date.slice(8, 10))) // Day\n      ;\n\n      reminderTime.setHours(hours);\n      reminderTime.setMinutes(minutes);\n      if (reminderTime > new Date()) {\n        const timeUntilEvent = reminderTime.getTime() - Date.now();\n        const timeoutId = setTimeout(() => {\n          toast.info(event.title + \"\\nReminder\");\n          // Perform other actions for the event reminder\n\n          // Remove the timeout identifier from the array\n          const index = timeouts.indexOf(timeoutId);\n          if (index > -1) {\n            timeouts.splice(index, 1);\n          }\n        }, timeUntilEvent);\n\n        // Store the timeout identifier in the array\n        timeouts.push(timeoutId);\n      }\n    });\n\n    // Cleanup function to clear any remaining timeouts\n    return () => {\n      timeouts.forEach(timeoutId => clearTimeout(timeoutId));\n    };\n  }, [events]);\n  const addEvent = (data, date) => {\n    console.log(data, date);\n    // saving date \n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    // converting time from string to ISOstring\n    // const userInput = data.reminderTime;\n    // const [hours, minutes] = userInput.split(\":\").map(Number);\n    // const reminderTime = utcDate;\n    // reminderTime.setUTCHours(hours);\n    // reminderTime.setUTCMinutes(minutes);\n    // reminderTime.setUTCSeconds(0);\n    // const reminderTimeUtcString = reminderTime.toISOString();\n    // console.log(reminderTimeUtcString);\n    // if(text!= null && text != \"\"){\n    setEvents(prev => [...prev, {\n      date: utcDate.toISOString(),\n      title: data.title,\n      desc: data.desc,\n      reminderTime: data.reminderTime\n    }]);\n    // }\n  };\n\n  const editEvent = (eventToBeEdited, newData) => {\n    setEvents(prev => prev.map(event => event === eventToBeEdited ? {\n      ...event,\n      title: newData.title,\n      desc: newData.desc,\n      reminderTime: newData.reminderTime\n    } : event));\n  };\n  const removeEvent = eventToBeDeleted => {\n    // const confirmed = window.confirm('Are you sure you want to remove this event?');\n    // if (confirmed) {\n    setEvents(prev => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calender, {\n      startingDate: new Date(),\n      eventsArr: events,\n      addEvent: addEvent,\n      editEvent: editEvent,\n      removeEvent: removeEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IssD0fcxr7ncf4BZehm1PYryZnM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Calender","MockEvents","useState","useEffect","ToastContainer","toast","jsxDEV","_jsxDEV","App","_s","events","setEvents","storedEvents","localStorage","getItem","JSON","parse","setItem","stringify","timeouts","forEach","event","reminderTime","Date","parseInt","date","slice","setHours","hours","setMinutes","minutes","timeUntilEvent","getTime","now","timeoutId","setTimeout","info","title","index","indexOf","splice","push","clearTimeout","addEvent","data","console","log","utcDate","UTC","getFullYear","getMonth","getDate","prev","toISOString","desc","editEvent","eventToBeEdited","newData","map","removeEvent","eventToBeDeleted","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startingDate","eventsArr","_c","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/App.js"],"sourcesContent":["import './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction App() {\n  const [events, setEvents] = useState(() => {\n    const storedEvents = localStorage.getItem('events');\n    return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n  });\n\n  // const [events, setEvents] = useState(MockEvents);\n  // useEffect(() => {\n  //   localStorage.setItem('events', JSON.stringify(events));\n  //   events.forEach((event) => {\n  //     const [hours, minutes] = event.reminderTime.split(\":\").map(Number);\n  //     const reminderTime = new Date(\n  //       parseInt(event.date.slice(0, 4)),   // Year\n  //       parseInt(event.date.slice(5, 7)) - 1,   // Month (0-based)\n  //       parseInt(event.date.slice(8, 10)),  // Day\n  //       // parseInt(event.date.slice(14, 16)),  // Minutes\n  //       // parseInt(event.date.slice(17, 19)),  // Seconds\n  //       // parseInt(event.date.slice(20, 23))   // Milliseconds\n  //     );\n  //     reminderTime.setHours(hours);\n  //     reminderTime.setMinutes(minutes);\n\n  //     if (reminderTime > new Date()) {\n  //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n  //       setTimeout(() => {\n  //         console.log(event.title);\n  //       }, timeUntilEvent);\n  //     }\n  //   });\n  // }, [events]);\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const timeouts = []; // Array to store the setTimeout identifiers\n  \n    events.forEach((event) => {\n      // const [hours, minutes] = event.reminderTime.split(\":\").map(Number);\n      const reminderTime = new Date(\n        parseInt(event.date.slice(0, 4)),   // Year\n        parseInt(event.date.slice(5, 7)) - 1,   // Month (0-based)\n        parseInt(event.date.slice(8, 10)),  // Day\n      );\n      reminderTime.setHours(hours);\n      reminderTime.setMinutes(minutes);\n  \n      if (reminderTime > new Date()) {\n        const timeUntilEvent = reminderTime.getTime() - Date.now();\n  \n        const timeoutId = setTimeout(() => {\n          toast.info(event.title + \"\\nReminder\");\n          // Perform other actions for the event reminder\n  \n          // Remove the timeout identifier from the array\n          const index = timeouts.indexOf(timeoutId);\n          if (index > -1) {\n            timeouts.splice(index, 1);\n          }\n        }, timeUntilEvent);\n  \n        // Store the timeout identifier in the array\n        timeouts.push(timeoutId);\n      }\n    });\n  \n    // Cleanup function to clear any remaining timeouts\n    return () => {\n      timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n    };\n  }, [events]);\n\n\n  const addEvent = (data, date) => {\n    console.log(data, date);\n    // saving date \n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    // converting time from string to ISOstring\n    // const userInput = data.reminderTime;\n    // const [hours, minutes] = userInput.split(\":\").map(Number);\n    // const reminderTime = utcDate;\n    // reminderTime.setUTCHours(hours);\n    // reminderTime.setUTCMinutes(minutes);\n    // reminderTime.setUTCSeconds(0);\n    // const reminderTimeUtcString = reminderTime.toISOString();\n    // console.log(reminderTimeUtcString);\n    // if(text!= null && text != \"\"){\n    setEvents(prev => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n    // }\n  }\n\n  const editEvent = (eventToBeEdited, newData) => {\n\n    setEvents((prev) =>\n      prev.map((event) =>\n        event === eventToBeEdited\n          ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n          : event\n      )\n    );\n  }\n\n  const removeEvent = (eventToBeDeleted) => {\n    // const confirmed = window.confirm('Are you sure you want to remove this event?');\n    // if (confirmed) {\n    setEvents(prev => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n    // }\n  };\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}