{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\Calender\\\\calender.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import { Wrapper, CalenderHead, SevenColGrid, HeadDay, CalenderBody, StyledDay, StyledEvent } from \"./styled\"\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import * as Icon from 'react-bootstrap-icons';\n// import { Days, MONTHS } from \"./const\";\n// import { range, getDaysInMonth, getSortedDays, areDatesTheSame, getDateobj } from \"./util\";\n// import { useState, useEffect } from \"react\";\n// import { EventModal } from \"./addEventModal/addEventModal\";\n// import \"./addEventModal/addEventModal.css\";\n\n// export const Calender = ({ startingDate, eventsArr, addEvent, editEvent, removeEvent }) => {\n//     const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\n//     const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\n//     const DaysInMonth = getDaysInMonth(currentMonth, currentYear);\n//     const [selectedDay, setSelectedDay] = useState(new Date().getDay());\n//     const [selectedEvent, setSelectedEvent] = useState(null);\n//     const [eventForm, setEventForm] = useState(null);\n//     const [showDeleteButton, setShowDeleteButton] = useState(false);\n\n//     const [Modal, setModal] = useState(false);\n\n//     const toggelModal = () => {\n//         setModal(!Modal);\n//     };\n\n//     const nextMonth = () => {\n//         if (currentMonth < 11) {\n//             setCurrentMonth((prev) => prev + 1);\n//         }\n//         else {\n//             setCurrentMonth(0);\n//             setCurrentYear((prev) => prev + 1);\n//         }\n//     };\n\n//     const prevMonth = () => {\n//         if (currentMonth > 0) {\n//             setCurrentMonth((prev) => prev - 1);\n//         }\n//         else {\n//             setCurrentMonth(11);\n//             setCurrentYear((prev) => prev - 1);\n//         }\n//     };\n\n//     const loadData = (thisevent) => {\n//         const eventOnDay = eventsArr.find((event) =>\n//             event.title === thisevent.title &&\n//             event.date === thisevent.date &&\n//             event.reminderTime === thisevent.reminderTime\n//         );\n//         setEventForm(eventOnDay || null);\n//         setSelectedEvent(eventOnDay);\n//     }\n\n//     const onAddEditEvent = (event, data, selectedDay) => {\n//         event.preventDefault();\n//         if (selectedEvent) {\n//             editEvent(selectedEvent, data);\n//             setSelectedEvent(null);\n//         }\n//         else {\n//             addEvent(data, selectedDay);\n//         }\n//         toggelModal();\n//         setEventForm(null);\n\n//     }\n\n//     const onRemoveEvent = (eventToBeDel) => {\n//         removeEvent(eventToBeDel);\n//         toggelModal();\n//         setEventForm(null);\n//         setSelectedEvent(null);\n//     }\n\n//     return (\n//         <Wrapper>\n//             <CalenderHead>\n//                 <Icon.ArrowLeftCircleFill onClick={prevMonth} />\n//                 <p className=\"m-0\">{MONTHS[currentMonth]} {currentYear}</p>\n//                 <Icon.ArrowRightCircleFill onClick={nextMonth} />\n//             </CalenderHead>\n//             <SevenColGrid>\n//                 {getSortedDays(currentMonth, currentYear).map((day) => (\n//                     <HeadDay>{day}</HeadDay>\n//                 ))}\n//             </SevenColGrid>\n//             <CalenderBody fourCol={DaysInMonth === 28}>\n//                 {range(DaysInMonth).map((day) => {\n\n//                     return (\n//                         <>\n//                             <StyledDay\n//                                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\n//                                 onClick={(e) => {\n//                                     setSelectedDay(getDateobj(day, currentMonth, currentYear));\n//                                     setEventForm(null);\n//                                     setShowDeleteButton(false);\n//                                     toggelModal();\n//                                 }}\n//                                 active={\n//                                     areDatesTheSame(new Date(), getDateobj(day, currentMonth, currentYear))\n//                                 }>\n//                                 <p>{day}</p>\n//                                 {\n//                                     eventsArr.map((event) =>\n//                                         areDatesTheSame(\n//                                             getDateobj(day, currentMonth, currentYear),\n//                                             event.date\n//                                         )\n//                                         &&\n//                                         <StyledEvent>\n//                                             <span className=\"w-100 text-start\" type=\"button\" onClick={(e) => {\n//                                                 e.stopPropagation();\n//                                                 loadData(event);\n//                                                 setShowDeleteButton(true);\n//                                                 toggelModal();\n//                                             }}>{event.title}</span>\n//                                             {/* <button className=\"border-0 bg-transparent\"><Icon.XLg className=\"ms-2\" onClick={(e) => {\n//                                         e.stopPropagation();\n//                                         onRemoveEvent(event.date, event.title);\n//                                     }} /></button> */}\n//                                         </StyledEvent>\n//                                     )\n//                                 }\n//                             </StyledDay>\n//                             {Modal &&\n//                                 <div className=\"modal\">\n//                                     <div onClick={toggelModal} className=\"overlay\">\n//                                         <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n//                                             <h4 className=\"form-heading\">Event</h4>\n//                                             <button type=\"button\" className=\"close-btn\" onClick={toggelModal}><Icon.XLg /></button>\n//                                             {\n//                                                 showDeleteButton &&\n//                                                 <button className=\"delete-btn\" onClick={(e) => {\n//                                                     e.stopPropagation();\n//                                                     onRemoveEvent(eventForm);\n//                                                 }}><Icon.Trash3 /></button>\n//                                             }\n//                                             <form>\n//                                                 <div className=\"form-group mb-3\">\n//                                                     <label className=\"form-label\">Title</label>\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.title : \"\"} onChange={(e) => setEventForm({ ...eventForm, title: e.target.value })} type=\"text\" placeholder=\"Event Tilte\" required></input>\n//                                                 </div>\n//                                                 <div className=\"form-group mb-3\">\n//                                                     <label className=\"form-label\">Description</label>\n//                                                     <textarea className=\"form-control\" rows=\"3\" value={eventForm ? eventForm.desc : \"\"} onChange={(e) => setEventForm({ ...eventForm, desc: e.target.value })} placeholder=\"Event description\" required />\n//                                                 </div>\n//                                                 <div className=\"form-group mb-3\">\n//                                                     <label className=\"form-label\">Reminder Time</label>\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.reminderTime : \"\"} onChange={(e) => setEventForm({ ...eventForm, reminderTime: e.target.value })} type=\"text\" placeholder=\"hh:mm\" required></input>\n//                                                 </div>\n//                                                 <div className=\"d-flex justify-content-end\">\n//                                                     <button className=\"save-event\" onClick={(e) => {\n//                                                         e.stopPropagation();\n//                                                         onAddEditEvent(e, eventForm, selectedDay);\n//                                                     }}>Save</button>\n//                                                 </div>\n//                                             </form>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             }\n//                         </>\n//                     )\n//                 })}\n//             </CalenderBody>\n\n//         </Wrapper>\n//     )\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { CalenderBody, CalenderHead, PortalWrapper, StyledDay, StyledEvent, Wrapper, SevenColGrid, HeadDays } from './styled';\nimport { DAYS, MONTHS, MOCKEVENTS } from './conts';\nimport { areDateTheSame, getDataObj, getDaysInMonth, getRandomColor, getSortedDays, range } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Calender = _ref => {\n  _s();\n  let {\n    startingDate\n  } = _ref;\n  const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\n  const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\n  const DAYSINMONTH = getDaysInMonth(currentMonth, currentYear);\n  const [events, setEvents] = useState(MOCKEVENTS);\n  const [showPortal, setShowPortal] = useState(false);\n  const [portalData, setPortalData] = useState({});\n  const [isEditing, setIsEditing] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const nextMonth = () => {\n    if (currentMonth < 11) {\n      setCurrentMonth(prev => prev + 1);\n    } else {\n      setCurrentMonth(0);\n      setCurrentYear(prev => prev + 1);\n    }\n  };\n  const prevMonth = () => {\n    if (currentMonth > 0) {\n      setCurrentMonth(prev => prev - 1);\n    } else {\n      setCurrentMonth(11);\n      setCurrentYear(prev => prev - 1);\n    }\n  };\n  const handleOnClickEvent = event => {\n    setShowPortal(true);\n    setPortalData(event);\n    setIsEditing(true);\n  };\n  const handlePotalClose = () => {\n    setShowPortal(false);\n    setIsEditing(false);\n  };\n  const handleDelete = (eventToDelete, event) => {\n    if (event) {\n      event.preventDefault();\n    }\n    setEvents(prevEvents => prevEvents.filter(ev => ev.title !== eventToDelete.title));\n    handlePotalClose();\n  };\n  const handleEdit = (eventToUpdate, newTitle) => {\n    setEvents(prevEvents => prevEvents.map(ev => {\n      if (ev.title === eventToUpdate.title && ev.date === eventToUpdate.date) {\n        return {\n          ...ev,\n          title: newTitle\n        };\n      }\n      return ev;\n    }));\n  };\n  const handleAddEvent = (date, color) => {\n    setPortalData({\n      date,\n      color\n    });\n    setShowPortal(true);\n    setIsAdding(true);\n  };\n  const handleSaveEvent = newTitle => {\n    if (newTitle) {\n      if (isAdding) {\n        setEvents(prevEvents => [...prevEvents, {\n          date: portalData.date,\n          title: newTitle,\n          color: portalData.color\n        }]);\n        setIsAdding(false);\n      } else if (isEditing) {\n        handleEdit(portalData, newTitle);\n        setIsEditing(false);\n      }\n      handlePotalClose();\n    }\n  };\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEvents(JSON.parse(storedEvents));\n    } else {\n      setEvents([]);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n  }, [events]);\n  const handleStorageEvent = event => {\n    if (event.key === 'events') {\n      setEvents(JSON.parse(event.newValue));\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('storage', handleStorageEvent);\n    return () => {\n      window.removeEventListener('storage', handleStorageEvent);\n    };\n  }, []);\n  const getEventOnDay = day => {\n    return events.filter(event => areDateTheSame(event.date, day));\n  };\n  const loadData = day => {\n    const eventOnDay = getEventOnDay(day);\n    setPortalData(eventOnDay[0]);\n    setShowPortal(true);\n  };\n  const renderCalender = () => {\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\n    const daysInMonth = getDaysInMonth(currentMonth, currentYear);\n    const prevMonthDays = getDaysInMonth(currentMonth === 0 ? 11 : currentMonth - 1, currentMonth === 0 ? currentYear - 1 : currentYear);\n    const days = getSortedDays(firstDayOfMonth, daysInMonth, prevMonthDays);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SevenColGrid, {\n        children: DAYS.map(day => /*#__PURE__*/_jsxDEV(HeadDays, {\n          children: day\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalenderBody, {\n        children: days.map((day, index) => {\n          const isPrevMonth = index < firstDayOfMonth;\n          const isNextMonth = index >= daysInMonth + firstDayOfMonth;\n          const isSelected = areDateTheSame(getDataObj(day, currentMonth, currentYear), selectedDay);\n          const eventOnDay = getEventOnDay(day);\n          return /*#__PURE__*/_jsxDEV(StyledDay, {\n            isPrevMonth: isPrevMonth,\n            isNextMonth: isNextMonth,\n            isSelected: isSelected,\n            onClick: e => {\n              setSelectedDay(getDataObj(day, currentMonth, currentYear));\n              loadData(day);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this), eventOnDay.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: eventOnDay.map(event => /*#__PURE__*/_jsxDEV(StyledEvent, {\n                color: event.color,\n                onClick: () => handleOnClickEvent(event),\n                children: event.title\n              }, event.title, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 19\n            }, this)]\n          }, day, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CalenderHead, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevMonth,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [MONTHS[currentMonth], \" \", currentYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextMonth,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), renderCalender(), showPortal && /*#__PURE__*/_jsxDEV(PortalWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Portal, {\n        showPortal: showPortal,\n        handleClose: handlePotalClose,\n        handleSaveEvent: handleSaveEvent,\n        handleDelete: handleDelete,\n        portalData: portalData,\n        isEditing: isEditing,\n        isAdding: isAdding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n};\n_s(Calender, \"66QZmtuzzL1UeGw0xTrkoh3qx4E=\");\n_c = Calender;\nconst Portal = _ref2 => {\n  _s2();\n  let {\n    showPortal,\n    handleClose,\n    handleSaveEvent,\n    handleDelete,\n    portalData,\n    isEditing,\n    isAdding\n  } = _ref2;\n  const [title, setTitle] = useState('');\n  useEffect(() => {\n    setTitle(portalData.title || '');\n  }, [portalData]);\n  const handleInputChange = event => {\n    setTitle(event.target.value);\n  };\n  const handleSave = event => {\n    event.preventDefault();\n    handleSaveEvent(title);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEditing ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this) : isAdding ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSave,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: title,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleClose,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: event => handleDelete(portalData, event),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n};\n_s2(Portal, \"FgwV7fs/MKl3JfXZzkj+8ZExyxs=\");\n_c2 = Portal;\nvar _c, _c2;\n$RefreshReg$(_c, \"Calender\");\n$RefreshReg$(_c2, \"Portal\");","map":{"version":3,"names":["React","useState","useEffect","CalenderBody","CalenderHead","PortalWrapper","StyledDay","StyledEvent","Wrapper","SevenColGrid","HeadDays","DAYS","MONTHS","MOCKEVENTS","areDateTheSame","getDataObj","getDaysInMonth","getRandomColor","getSortedDays","range","jsxDEV","_jsxDEV","Fragment","_Fragment","Calender","_ref","_s","startingDate","currentMonth","setCurrentMonth","getMonth","currentYear","setCurrentYear","getFullYear","DAYSINMONTH","events","setEvents","showPortal","setShowPortal","portalData","setPortalData","isEditing","setIsEditing","isAdding","setIsAdding","nextMonth","prev","prevMonth","handleOnClickEvent","event","handlePotalClose","handleDelete","eventToDelete","preventDefault","prevEvents","filter","ev","title","handleEdit","eventToUpdate","newTitle","map","date","handleAddEvent","color","handleSaveEvent","storedEvents","localStorage","getItem","JSON","parse","setItem","stringify","handleStorageEvent","key","newValue","window","addEventListener","removeEventListener","getEventOnDay","day","loadData","eventOnDay","renderCalender","firstDayOfMonth","Date","getDay","daysInMonth","prevMonthDays","days","children","fileName","_jsxFileName","lineNumber","columnNumber","index","isPrevMonth","isNextMonth","isSelected","selectedDay","onClick","e","setSelectedDay","length","Portal","handleClose","_c","_ref2","_s2","setTitle","handleInputChange","target","value","handleSave","onSubmit","type","onChange","_c2","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/Calender/calender.js"],"sourcesContent":["// import { Wrapper, CalenderHead, SevenColGrid, HeadDay, CalenderBody, StyledDay, StyledEvent } from \"./styled\"\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import * as Icon from 'react-bootstrap-icons';\r\n// import { Days, MONTHS } from \"./const\";\r\n// import { range, getDaysInMonth, getSortedDays, areDatesTheSame, getDateobj } from \"./util\";\r\n// import { useState, useEffect } from \"react\";\r\n// import { EventModal } from \"./addEventModal/addEventModal\";\r\n// import \"./addEventModal/addEventModal.css\";\r\n\r\n// export const Calender = ({ startingDate, eventsArr, addEvent, editEvent, removeEvent }) => {\r\n//     const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\r\n//     const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\r\n//     const DaysInMonth = getDaysInMonth(currentMonth, currentYear);\r\n//     const [selectedDay, setSelectedDay] = useState(new Date().getDay());\r\n//     const [selectedEvent, setSelectedEvent] = useState(null);\r\n//     const [eventForm, setEventForm] = useState(null);\r\n//     const [showDeleteButton, setShowDeleteButton] = useState(false);\r\n\r\n//     const [Modal, setModal] = useState(false);\r\n\r\n//     const toggelModal = () => {\r\n//         setModal(!Modal);\r\n//     };\r\n\r\n//     const nextMonth = () => {\r\n//         if (currentMonth < 11) {\r\n//             setCurrentMonth((prev) => prev + 1);\r\n//         }\r\n//         else {\r\n//             setCurrentMonth(0);\r\n//             setCurrentYear((prev) => prev + 1);\r\n//         }\r\n//     };\r\n\r\n//     const prevMonth = () => {\r\n//         if (currentMonth > 0) {\r\n//             setCurrentMonth((prev) => prev - 1);\r\n//         }\r\n//         else {\r\n//             setCurrentMonth(11);\r\n//             setCurrentYear((prev) => prev - 1);\r\n//         }\r\n//     };\r\n\r\n//     const loadData = (thisevent) => {\r\n//         const eventOnDay = eventsArr.find((event) =>\r\n//             event.title === thisevent.title &&\r\n//             event.date === thisevent.date &&\r\n//             event.reminderTime === thisevent.reminderTime\r\n//         );\r\n//         setEventForm(eventOnDay || null);\r\n//         setSelectedEvent(eventOnDay);\r\n//     }\r\n\r\n//     const onAddEditEvent = (event, data, selectedDay) => {\r\n//         event.preventDefault();\r\n//         if (selectedEvent) {\r\n//             editEvent(selectedEvent, data);\r\n//             setSelectedEvent(null);\r\n//         }\r\n//         else {\r\n//             addEvent(data, selectedDay);\r\n//         }\r\n//         toggelModal();\r\n//         setEventForm(null);\r\n\r\n//     }\r\n\r\n//     const onRemoveEvent = (eventToBeDel) => {\r\n//         removeEvent(eventToBeDel);\r\n//         toggelModal();\r\n//         setEventForm(null);\r\n//         setSelectedEvent(null);\r\n//     }\r\n\r\n//     return (\r\n//         <Wrapper>\r\n//             <CalenderHead>\r\n//                 <Icon.ArrowLeftCircleFill onClick={prevMonth} />\r\n//                 <p className=\"m-0\">{MONTHS[currentMonth]} {currentYear}</p>\r\n//                 <Icon.ArrowRightCircleFill onClick={nextMonth} />\r\n//             </CalenderHead>\r\n//             <SevenColGrid>\r\n//                 {getSortedDays(currentMonth, currentYear).map((day) => (\r\n//                     <HeadDay>{day}</HeadDay>\r\n//                 ))}\r\n//             </SevenColGrid>\r\n//             <CalenderBody fourCol={DaysInMonth === 28}>\r\n//                 {range(DaysInMonth).map((day) => {\r\n\r\n//                     return (\r\n//                         <>\r\n//                             <StyledDay\r\n//                                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\r\n//                                 onClick={(e) => {\r\n//                                     setSelectedDay(getDateobj(day, currentMonth, currentYear));\r\n//                                     setEventForm(null);\r\n//                                     setShowDeleteButton(false);\r\n//                                     toggelModal();\r\n//                                 }}\r\n//                                 active={\r\n//                                     areDatesTheSame(new Date(), getDateobj(day, currentMonth, currentYear))\r\n//                                 }>\r\n//                                 <p>{day}</p>\r\n//                                 {\r\n//                                     eventsArr.map((event) =>\r\n//                                         areDatesTheSame(\r\n//                                             getDateobj(day, currentMonth, currentYear),\r\n//                                             event.date\r\n//                                         )\r\n//                                         &&\r\n//                                         <StyledEvent>\r\n//                                             <span className=\"w-100 text-start\" type=\"button\" onClick={(e) => {\r\n//                                                 e.stopPropagation();\r\n//                                                 loadData(event);\r\n//                                                 setShowDeleteButton(true);\r\n//                                                 toggelModal();\r\n//                                             }}>{event.title}</span>\r\n//                                             {/* <button className=\"border-0 bg-transparent\"><Icon.XLg className=\"ms-2\" onClick={(e) => {\r\n//                                         e.stopPropagation();\r\n//                                         onRemoveEvent(event.date, event.title);\r\n//                                     }} /></button> */}\r\n//                                         </StyledEvent>\r\n//                                     )\r\n//                                 }\r\n//                             </StyledDay>\r\n//                             {Modal &&\r\n//                                 <div className=\"modal\">\r\n//                                     <div onClick={toggelModal} className=\"overlay\">\r\n//                                         <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n//                                             <h4 className=\"form-heading\">Event</h4>\r\n//                                             <button type=\"button\" className=\"close-btn\" onClick={toggelModal}><Icon.XLg /></button>\r\n//                                             {\r\n//                                                 showDeleteButton &&\r\n//                                                 <button className=\"delete-btn\" onClick={(e) => {\r\n//                                                     e.stopPropagation();\r\n//                                                     onRemoveEvent(eventForm);\r\n//                                                 }}><Icon.Trash3 /></button>\r\n//                                             }\r\n//                                             <form>\r\n//                                                 <div className=\"form-group mb-3\">\r\n//                                                     <label className=\"form-label\">Title</label>\r\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.title : \"\"} onChange={(e) => setEventForm({ ...eventForm, title: e.target.value })} type=\"text\" placeholder=\"Event Tilte\" required></input>\r\n//                                                 </div>\r\n//                                                 <div className=\"form-group mb-3\">\r\n//                                                     <label className=\"form-label\">Description</label>\r\n//                                                     <textarea className=\"form-control\" rows=\"3\" value={eventForm ? eventForm.desc : \"\"} onChange={(e) => setEventForm({ ...eventForm, desc: e.target.value })} placeholder=\"Event description\" required />\r\n//                                                 </div>\r\n//                                                 <div className=\"form-group mb-3\">\r\n//                                                     <label className=\"form-label\">Reminder Time</label>\r\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.reminderTime : \"\"} onChange={(e) => setEventForm({ ...eventForm, reminderTime: e.target.value })} type=\"text\" placeholder=\"hh:mm\" required></input>\r\n//                                                 </div>\r\n//                                                 <div className=\"d-flex justify-content-end\">\r\n//                                                     <button className=\"save-event\" onClick={(e) => {\r\n//                                                         e.stopPropagation();\r\n//                                                         onAddEditEvent(e, eventForm, selectedDay);\r\n//                                                     }}>Save</button>\r\n//                                                 </div>\r\n//                                             </form>\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             }\r\n//                         </>\r\n//                     )\r\n//                 })}\r\n//             </CalenderBody>\r\n\r\n//         </Wrapper>\r\n//     )\r\n// }\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  CalenderBody,\r\n  CalenderHead,\r\n  PortalWrapper,\r\n  StyledDay,\r\n  StyledEvent,\r\n  Wrapper,\r\n  SevenColGrid,\r\n  HeadDays\r\n} from './styled';\r\nimport { DAYS, MONTHS, MOCKEVENTS } from './conts';\r\nimport {\r\n  areDateTheSame,\r\n  getDataObj,\r\n  getDaysInMonth,\r\n  getRandomColor,\r\n  getSortedDays,\r\n  range\r\n} from './util';\r\n\r\nexport const Calender = ({ startingDate }) => {\r\n  const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\r\n  const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\r\n  const DAYSINMONTH = getDaysInMonth(currentMonth, currentYear);\r\n  const [events, setEvents] = useState(MOCKEVENTS);\r\n  const [showPortal, setShowPortal] = useState(false);\r\n  const [portalData, setPortalData] = useState({});\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n\r\n  const nextMonth = () => {\r\n    if (currentMonth < 11) {\r\n      setCurrentMonth((prev) => prev + 1);\r\n    } else {\r\n      setCurrentMonth(0);\r\n      setCurrentYear((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const prevMonth = () => {\r\n    if (currentMonth > 0) {\r\n      setCurrentMonth((prev) => prev - 1);\r\n    } else {\r\n      setCurrentMonth(11);\r\n      setCurrentYear((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  const handleOnClickEvent = (event) => {\r\n    setShowPortal(true);\r\n    setPortalData(event);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handlePotalClose = () => {\r\n    setShowPortal(false);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDelete = (eventToDelete, event) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    setEvents((prevEvents) =>\r\n      prevEvents.filter((ev) => ev.title !== eventToDelete.title)\r\n    );\r\n    handlePotalClose();\r\n  };\r\n\r\n  const handleEdit = (eventToUpdate, newTitle) => {\r\n    setEvents((prevEvents) =>\r\n      prevEvents.map((ev) => {\r\n        if (\r\n          ev.title === eventToUpdate.title &&\r\n          ev.date === eventToUpdate.date\r\n        ) {\r\n          return { ...ev, title: newTitle };\r\n        }\r\n        return ev;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleAddEvent = (date, color) => {\r\n    setPortalData({ date, color });\r\n    setShowPortal(true);\r\n    setIsAdding(true);\r\n  };\r\n\r\n  const handleSaveEvent = (newTitle) => {\r\n    if (newTitle) {\r\n      if (isAdding) {\r\n        setEvents((prevEvents) => [\r\n          ...prevEvents,\r\n          { date: portalData.date, title: newTitle, color: portalData.color }\r\n        ]);\r\n        setIsAdding(false);\r\n      } else if (isEditing) {\r\n        handleEdit(portalData, newTitle);\r\n        setIsEditing(false);\r\n      }\r\n      handlePotalClose();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedEvents = localStorage.getItem('events');\r\n    if (storedEvents) {\r\n      setEvents(JSON.parse(storedEvents));\r\n    } else {\r\n      setEvents([]);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('events', JSON.stringify(events));\r\n  }, [events]);\r\n\r\n  const handleStorageEvent = (event) => {\r\n    if (event.key === 'events') {\r\n      setEvents(JSON.parse(event.newValue));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('storage', handleStorageEvent);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageEvent);\r\n    };\r\n  }, []);\r\n\r\n  const getEventOnDay = (day) => {\r\n    return events.filter((event) => areDateTheSame(event.date, day));\r\n  };\r\n\r\n  const loadData = (day) => {\r\n    const eventOnDay = getEventOnDay(day);\r\n    setPortalData(eventOnDay[0]);\r\n    setShowPortal(true);\r\n  };\r\n\r\n  const renderCalender = () => {\r\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n    const daysInMonth = getDaysInMonth(currentMonth, currentYear);\r\n    const prevMonthDays = getDaysInMonth(\r\n      currentMonth === 0 ? 11 : currentMonth - 1,\r\n      currentMonth === 0 ? currentYear - 1 : currentYear\r\n    );\r\n    const days = getSortedDays(firstDayOfMonth, daysInMonth, prevMonthDays);\r\n\r\n    return (\r\n      <>\r\n        <SevenColGrid>\r\n          {DAYS.map((day) => (\r\n            <HeadDays key={day}>{day}</HeadDays>\r\n          ))}\r\n        </SevenColGrid>\r\n        <CalenderBody>\r\n          {days.map((day, index) => {\r\n            const isPrevMonth = index < firstDayOfMonth;\r\n            const isNextMonth = index >= daysInMonth + firstDayOfMonth;\r\n            const isSelected = areDateTheSame(\r\n              getDataObj(day, currentMonth, currentYear),\r\n              selectedDay\r\n            );\r\n            const eventOnDay = getEventOnDay(day);\r\n\r\n            return (\r\n              <StyledDay\r\n                key={day}\r\n                isPrevMonth={isPrevMonth}\r\n                isNextMonth={isNextMonth}\r\n                isSelected={isSelected}\r\n                onClick={(e) => {\r\n                  setSelectedDay(getDataObj(day, currentMonth, currentYear));\r\n                  loadData(day);\r\n                }}\r\n              >\r\n                <div>{day}</div>\r\n                {eventOnDay.length > 0 && (\r\n                  <div>\r\n                    {eventOnDay.map((event) => (\r\n                      <StyledEvent\r\n                        key={event.title}\r\n                        color={event.color}\r\n                        onClick={() => handleOnClickEvent(event)}\r\n                      >\r\n                        {event.title}\r\n                      </StyledEvent>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </StyledDay>\r\n            );\r\n          })}\r\n        </CalenderBody>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <CalenderHead>\r\n        <button onClick={prevMonth}>Previous</button>\r\n        <div>\r\n          {MONTHS[currentMonth]} {currentYear}\r\n        </div>\r\n        <button onClick={nextMonth}>Next</button>\r\n      </CalenderHead>\r\n      {renderCalender()}\r\n      {showPortal && (\r\n        <PortalWrapper>\r\n          <Portal\r\n            showPortal={showPortal}\r\n            handleClose={handlePotalClose}\r\n            handleSaveEvent={handleSaveEvent}\r\n            handleDelete={handleDelete}\r\n            portalData={portalData}\r\n            isEditing={isEditing}\r\n            isAdding={isAdding}\r\n          />\r\n        </PortalWrapper>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Portal = ({\r\n  showPortal,\r\n  handleClose,\r\n  handleSaveEvent,\r\n  handleDelete,\r\n  portalData,\r\n  isEditing,\r\n  isAdding\r\n}) => {\r\n  const [title, setTitle] = useState('');\r\n\r\n  useEffect(() => {\r\n    setTitle(portalData.title || '');\r\n  }, [portalData]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const handleSave = (event) => {\r\n    event.preventDefault();\r\n    handleSaveEvent(title);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {isEditing ? (\r\n          <h2>Edit Event</h2>\r\n        ) : isAdding ? (\r\n          <h2>Add Event</h2>\r\n        ) : (\r\n          <h2>Event</h2>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <form onSubmit={handleSave}>\r\n          <div>\r\n            <label>Title:</label>\r\n            <input type=\"text\" value={title} onChange={handleInputChange} />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">Save</button>\r\n            <button type=\"button\" onClick={handleClose}>\r\n              Cancel\r\n            </button>\r\n            {isEditing && (\r\n              <button\r\n                type=\"button\"\r\n                onClick={(event) => handleDelete(portalData, event)}\r\n              >\r\n                Delete\r\n              </button>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,YAAY,EACZC,YAAY,EACZC,aAAa,EACbC,SAAS,EACTC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZC,QAAQ,QACH,UAAU;AACjB,SAASC,IAAI,EAAEC,MAAM,EAAEC,UAAU,QAAQ,SAAS;AAClD,SACEC,cAAc,EACdC,UAAU,EACVC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,KAAK,QACA,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhB,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAAsB;EAAAC,EAAA;EAAA,IAArB;IAAEC;EAAa,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC0B,YAAY,CAACG,QAAQ,CAAC,CAAC,CAAC;EACzE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC0B,YAAY,CAACM,WAAW,CAAC,CAAC,CAAC;EAC1E,MAAMC,WAAW,GAAGlB,cAAc,CAACY,YAAY,EAAEG,WAAW,CAAC;EAC7D,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGnC,QAAQ,CAACY,UAAU,CAAC;EAChD,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACwC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0C,QAAQ,EAAEC,WAAW,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAM4C,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIjB,YAAY,GAAG,EAAE,EAAE;MACrBC,eAAe,CAAEiB,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IACrC,CAAC,MAAM;MACLjB,eAAe,CAAC,CAAC,CAAC;MAClBG,cAAc,CAAEc,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IACpC;EACF,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAInB,YAAY,GAAG,CAAC,EAAE;MACpBC,eAAe,CAAEiB,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IACrC,CAAC,MAAM;MACLjB,eAAe,CAAC,EAAE,CAAC;MACnBG,cAAc,CAAEc,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IACpC;EACF,CAAC;EAED,MAAME,kBAAkB,GAAIC,KAAK,IAAK;IACpCX,aAAa,CAAC,IAAI,CAAC;IACnBE,aAAa,CAACS,KAAK,CAAC;IACpBP,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;IAC7BZ,aAAa,CAAC,KAAK,CAAC;IACpBI,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMS,YAAY,GAAGA,CAACC,aAAa,EAAEH,KAAK,KAAK;IAC7C,IAAIA,KAAK,EAAE;MACTA,KAAK,CAACI,cAAc,CAAC,CAAC;IACxB;IACAjB,SAAS,CAAEkB,UAAU,IACnBA,UAAU,CAACC,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACC,KAAK,KAAKL,aAAa,CAACK,KAAK,CAC5D,CAAC;IACDP,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAED,MAAMQ,UAAU,GAAGA,CAACC,aAAa,EAAEC,QAAQ,KAAK;IAC9CxB,SAAS,CAAEkB,UAAU,IACnBA,UAAU,CAACO,GAAG,CAAEL,EAAE,IAAK;MACrB,IACEA,EAAE,CAACC,KAAK,KAAKE,aAAa,CAACF,KAAK,IAChCD,EAAE,CAACM,IAAI,KAAKH,aAAa,CAACG,IAAI,EAC9B;QACA,OAAO;UAAE,GAAGN,EAAE;UAAEC,KAAK,EAAEG;QAAS,CAAC;MACnC;MACA,OAAOJ,EAAE;IACX,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAMO,cAAc,GAAGA,CAACD,IAAI,EAAEE,KAAK,KAAK;IACtCxB,aAAa,CAAC;MAAEsB,IAAI;MAAEE;IAAM,CAAC,CAAC;IAC9B1B,aAAa,CAAC,IAAI,CAAC;IACnBM,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMqB,eAAe,GAAIL,QAAQ,IAAK;IACpC,IAAIA,QAAQ,EAAE;MACZ,IAAIjB,QAAQ,EAAE;QACZP,SAAS,CAAEkB,UAAU,IAAK,CACxB,GAAGA,UAAU,EACb;UAAEQ,IAAI,EAAEvB,UAAU,CAACuB,IAAI;UAAEL,KAAK,EAAEG,QAAQ;UAAEI,KAAK,EAAEzB,UAAU,CAACyB;QAAM,CAAC,CACpE,CAAC;QACFpB,WAAW,CAAC,KAAK,CAAC;MACpB,CAAC,MAAM,IAAIH,SAAS,EAAE;QACpBiB,UAAU,CAACnB,UAAU,EAAEqB,QAAQ,CAAC;QAChClB,YAAY,CAAC,KAAK,CAAC;MACrB;MACAQ,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC;EAEDhD,SAAS,CAAC,MAAM;IACd,MAAMgE,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnD,IAAIF,YAAY,EAAE;MAChB9B,SAAS,CAACiC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;IACrC,CAAC,MAAM;MACL9B,SAAS,CAAC,EAAE,CAAC;IACf;EACF,CAAC,EAAE,EAAE,CAAC;EAENlC,SAAS,CAAC,MAAM;IACdiE,YAAY,CAACI,OAAO,CAAC,QAAQ,EAAEF,IAAI,CAACG,SAAS,CAACrC,MAAM,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMsC,kBAAkB,GAAIxB,KAAK,IAAK;IACpC,IAAIA,KAAK,CAACyB,GAAG,KAAK,QAAQ,EAAE;MAC1BtC,SAAS,CAACiC,IAAI,CAACC,KAAK,CAACrB,KAAK,CAAC0B,QAAQ,CAAC,CAAC;IACvC;EACF,CAAC;EAEDzE,SAAS,CAAC,MAAM;IACd0E,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,kBAAkB,CAAC;IAEtD,OAAO,MAAM;MACXG,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEL,kBAAkB,CAAC;IAC3D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,aAAa,GAAIC,GAAG,IAAK;IAC7B,OAAO7C,MAAM,CAACoB,MAAM,CAAEN,KAAK,IAAKnC,cAAc,CAACmC,KAAK,CAACa,IAAI,EAAEkB,GAAG,CAAC,CAAC;EAClE,CAAC;EAED,MAAMC,QAAQ,GAAID,GAAG,IAAK;IACxB,MAAME,UAAU,GAAGH,aAAa,CAACC,GAAG,CAAC;IACrCxC,aAAa,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5B5C,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAM6C,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,eAAe,GAAG,IAAIC,IAAI,CAACtD,WAAW,EAAEH,YAAY,EAAE,CAAC,CAAC,CAAC0D,MAAM,CAAC,CAAC;IACvE,MAAMC,WAAW,GAAGvE,cAAc,CAACY,YAAY,EAAEG,WAAW,CAAC;IAC7D,MAAMyD,aAAa,GAAGxE,cAAc,CAClCY,YAAY,KAAK,CAAC,GAAG,EAAE,GAAGA,YAAY,GAAG,CAAC,EAC1CA,YAAY,KAAK,CAAC,GAAGG,WAAW,GAAG,CAAC,GAAGA,WACzC,CAAC;IACD,MAAM0D,IAAI,GAAGvE,aAAa,CAACkE,eAAe,EAAEG,WAAW,EAAEC,aAAa,CAAC;IAEvE,oBACEnE,OAAA,CAAAE,SAAA;MAAAmE,QAAA,gBACErE,OAAA,CAACZ,YAAY;QAAAiF,QAAA,EACV/E,IAAI,CAACkD,GAAG,CAAEmB,GAAG,iBACZ3D,OAAA,CAACX,QAAQ;UAAAgF,QAAA,EAAYV;QAAG,GAATA,GAAG;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiB,CACpC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACU,CAAC,eACfzE,OAAA,CAAClB,YAAY;QAAAuF,QAAA,EACVD,IAAI,CAAC5B,GAAG,CAAC,CAACmB,GAAG,EAAEe,KAAK,KAAK;UACxB,MAAMC,WAAW,GAAGD,KAAK,GAAGX,eAAe;UAC3C,MAAMa,WAAW,GAAGF,KAAK,IAAIR,WAAW,GAAGH,eAAe;UAC1D,MAAMc,UAAU,GAAGpF,cAAc,CAC/BC,UAAU,CAACiE,GAAG,EAAEpD,YAAY,EAAEG,WAAW,CAAC,EAC1CoE,WACF,CAAC;UACD,MAAMjB,UAAU,GAAGH,aAAa,CAACC,GAAG,CAAC;UAErC,oBACE3D,OAAA,CAACf,SAAS;YAER0F,WAAW,EAAEA,WAAY;YACzBC,WAAW,EAAEA,WAAY;YACzBC,UAAU,EAAEA,UAAW;YACvBE,OAAO,EAAGC,CAAC,IAAK;cACdC,cAAc,CAACvF,UAAU,CAACiE,GAAG,EAAEpD,YAAY,EAAEG,WAAW,CAAC,CAAC;cAC1DkD,QAAQ,CAACD,GAAG,CAAC;YACf,CAAE;YAAAU,QAAA,gBAEFrE,OAAA;cAAAqE,QAAA,EAAMV;YAAG;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,EACfZ,UAAU,CAACqB,MAAM,GAAG,CAAC,iBACpBlF,OAAA;cAAAqE,QAAA,EACGR,UAAU,CAACrB,GAAG,CAAEZ,KAAK,iBACpB5B,OAAA,CAACd,WAAW;gBAEVyD,KAAK,EAAEf,KAAK,CAACe,KAAM;gBACnBoC,OAAO,EAAEA,CAAA,KAAMpD,kBAAkB,CAACC,KAAK,CAAE;gBAAAyC,QAAA,EAExCzC,KAAK,CAACQ;cAAK,GAJPR,KAAK,CAACQ,KAAK;gBAAAkC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKL,CACd;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CACN;UAAA,GAtBId,GAAG;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAuBC,CAAC;QAEhB,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACU,CAAC;IAAA,eACf,CAAC;EAEP,CAAC;EAED,oBACEzE,OAAA,CAACb,OAAO;IAAAkF,QAAA,gBACNrE,OAAA,CAACjB,YAAY;MAAAsF,QAAA,gBACXrE,OAAA;QAAQ+E,OAAO,EAAErD,SAAU;QAAA2C,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7CzE,OAAA;QAAAqE,QAAA,GACG9E,MAAM,CAACgB,YAAY,CAAC,EAAC,GAAC,EAACG,WAAW;MAAA;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACNzE,OAAA;QAAQ+E,OAAO,EAAEvD,SAAU;QAAA6C,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,EACdX,cAAc,CAAC,CAAC,EAChB9C,UAAU,iBACThB,OAAA,CAAChB,aAAa;MAAAqF,QAAA,eACZrE,OAAA,CAACmF,MAAM;QACLnE,UAAU,EAAEA,UAAW;QACvBoE,WAAW,EAAEvD,gBAAiB;QAC9Be,eAAe,EAAEA,eAAgB;QACjCd,YAAY,EAAEA,YAAa;QAC3BZ,UAAU,EAAEA,UAAW;QACvBE,SAAS,EAAEA,SAAU;QACrBE,QAAQ,EAAEA;MAAS;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW,CAChB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEd,CAAC;AAACpE,EAAA,CA9MWF,QAAQ;AAAAkF,EAAA,GAARlF,QAAQ;AAgNrB,MAAMgF,MAAM,GAAGG,KAAA,IAQT;EAAAC,GAAA;EAAA,IARU;IACdvE,UAAU;IACVoE,WAAW;IACXxC,eAAe;IACfd,YAAY;IACZZ,UAAU;IACVE,SAAS;IACTE;EACF,CAAC,GAAAgE,KAAA;EACC,MAAM,CAAClD,KAAK,EAAEoD,QAAQ,CAAC,GAAG5G,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd2G,QAAQ,CAACtE,UAAU,CAACkB,KAAK,IAAI,EAAE,CAAC;EAClC,CAAC,EAAE,CAAClB,UAAU,CAAC,CAAC;EAEhB,MAAMuE,iBAAiB,GAAI7D,KAAK,IAAK;IACnC4D,QAAQ,CAAC5D,KAAK,CAAC8D,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,UAAU,GAAIhE,KAAK,IAAK;IAC5BA,KAAK,CAACI,cAAc,CAAC,CAAC;IACtBY,eAAe,CAACR,KAAK,CAAC;EACxB,CAAC;EAED,oBACEpC,OAAA;IAAAqE,QAAA,gBACErE,OAAA;MAAAqE,QAAA,EACGjD,SAAS,gBACRpB,OAAA;QAAAqE,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,GACjBnD,QAAQ,gBACVtB,OAAA;QAAAqE,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,gBAElBzE,OAAA;QAAAqE,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IACd;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNzE,OAAA;MAAAqE,QAAA,eACErE,OAAA;QAAM6F,QAAQ,EAAED,UAAW;QAAAvB,QAAA,gBACzBrE,OAAA;UAAAqE,QAAA,gBACErE,OAAA;YAAAqE,QAAA,EAAO;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACrBzE,OAAA;YAAO8F,IAAI,EAAC,MAAM;YAACH,KAAK,EAAEvD,KAAM;YAAC2D,QAAQ,EAAEN;UAAkB;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7D,CAAC,eACNzE,OAAA;UAAAqE,QAAA,gBACErE,OAAA;YAAQ8F,IAAI,EAAC,QAAQ;YAAAzB,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnCzE,OAAA;YAAQ8F,IAAI,EAAC,QAAQ;YAACf,OAAO,EAAEK,WAAY;YAAAf,QAAA,EAAC;UAE5C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACRrD,SAAS,iBACRpB,OAAA;YACE8F,IAAI,EAAC,QAAQ;YACbf,OAAO,EAAGnD,KAAK,IAAKE,YAAY,CAACZ,UAAU,EAAEU,KAAK,CAAE;YAAAyC,QAAA,EACrD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACc,GAAA,CA3DIJ,MAAM;AAAAa,GAAA,GAANb,MAAM;AAAA,IAAAE,EAAA,EAAAW,GAAA;AAAAC,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}