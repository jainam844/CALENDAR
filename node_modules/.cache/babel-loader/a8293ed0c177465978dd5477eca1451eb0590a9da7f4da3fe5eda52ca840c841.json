{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nimport './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [events, setEvents] = useState(() => {\n    const storedEvents = localStorage.getItem('events');\n    return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n  });\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const timeouts = [];\n\n    // events.forEach((event) => {\n    //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n    //   if (event.date) {\n    //     const reminderTime = new Date(\n    //       parseInt(event.date.slice(0, 4)),\n    //       parseInt(event.date.slice(5, 7)) - 1,\n    //       parseInt(event.date.slice(8, 10))\n    //     );\n    //     reminderTime.setHours(hours);\n    //     reminderTime.setMinutes(minutes);\n\n    //     if (reminderTime > new Date()) {\n    //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n    //       const timeoutId = setTimeout(() => {\n    //         toast.info(event.title + \"\\nReminder\");\n    //         const index = timeouts.indexOf(timeoutId);\n    //         if (index > -1) {\n    //           timeouts.splice(index, 1);\n    //         }\n    //       }, timeUntilEvent);\n\n    //       timeouts.push(timeoutId);\n    //     }\n    //   }\n    // });\n\n    // return () => {\n    //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n    // };\n  }, [events]);\n  const addEvent = (data, selectedDay) => {\n    const event = {\n      ...data,\n      date: selectedDay,\n      id: new Date().getTime()\n    };\n    const updatedEvents = [...eventsArr, event];\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n  };\n  const editEvent = (selectedEvent, data) => {\n    const updatedEvents = eventsArr.map(event => event.id === selectedEvent.id ? {\n      ...event,\n      ...data\n    } : event);\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n  };\n  const removeEvent = eventToBeDeleted => {\n    setEvents(prev => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calender, {\n      startingDate: new Date(),\n      eventsArr: events,\n      addEvent: addEvent,\n      editEvent: editEvent,\n      removeEvent: removeEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IssD0fcxr7ncf4BZehm1PYryZnM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Calender","MockEvents","useState","useEffect","ToastContainer","toast","jsxDEV","_jsxDEV","App","_s","events","setEvents","storedEvents","localStorage","getItem","JSON","parse","setItem","stringify","timeouts","addEvent","data","selectedDay","event","date","id","Date","getTime","updatedEvents","eventsArr","editEvent","selectedEvent","map","removeEvent","eventToBeDeleted","prev","filter","title","reminderTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startingDate","_c","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/App.js"],"sourcesContent":["// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nimport './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const [events, setEvents] = useState(() => {\n    const storedEvents = localStorage.getItem('events');\n    return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const timeouts = [];\n\n    // events.forEach((event) => {\n    //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n    //   if (event.date) {\n    //     const reminderTime = new Date(\n    //       parseInt(event.date.slice(0, 4)),\n    //       parseInt(event.date.slice(5, 7)) - 1,\n    //       parseInt(event.date.slice(8, 10))\n    //     );\n    //     reminderTime.setHours(hours);\n    //     reminderTime.setMinutes(minutes);\n\n    //     if (reminderTime > new Date()) {\n    //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n    //       const timeoutId = setTimeout(() => {\n    //         toast.info(event.title + \"\\nReminder\");\n    //         const index = timeouts.indexOf(timeoutId);\n    //         if (index > -1) {\n    //           timeouts.splice(index, 1);\n    //         }\n    //       }, timeUntilEvent);\n\n    //       timeouts.push(timeoutId);\n    //     }\n    //   }\n    // });\n\n    // return () => {\n    //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n    // };\n  }, [events]);\n  const addEvent = (data, selectedDay) => {\n    const event = { ...data, date: selectedDay, id: new Date().getTime() };\n    const updatedEvents = [...eventsArr, event];\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n  };\n  \n  const editEvent = (selectedEvent, data) => {\n    const updatedEvents = eventsArr.map(event =>\n      event.id === selectedEvent.id ? { ...event, ...data } : event\n    );\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n  };\n  \n  const removeEvent = (eventToBeDeleted) => {\n    setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n  };\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}