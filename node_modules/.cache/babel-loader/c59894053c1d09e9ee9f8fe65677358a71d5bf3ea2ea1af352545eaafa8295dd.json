{"ast":null,"code":"import './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, EventTime: data.time ,ReminderTime:data.reminder}]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, EventTime: newData.time ,ReminderTime:newData.reminder}\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date ));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\nfunction App() {}\n_c = App;\nexport default App;\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Calender","MockEvents","useState","useEffect","ToastContainer","toast","App","_c","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/App.js"],"sourcesContent":["import './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, EventTime: data.time ,ReminderTime:data.reminder}]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, EventTime: newData.time ,ReminderTime:newData.reminder}\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date ));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\nfunction App() {\n}\nexport default App;\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAAA,EAAG,CACf;AAACC,EAAA,GADQD,GAAG;AAEZ,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}