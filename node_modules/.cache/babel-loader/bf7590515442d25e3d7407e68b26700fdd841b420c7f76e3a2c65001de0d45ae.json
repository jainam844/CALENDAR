{"ast":null,"code":"// import { Wrapper, CalenderHead, SevenColGrid, HeadDay, CalenderBody, StyledDay, StyledEvent } from \"./styled\"\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import * as Icon from 'react-bootstrap-icons';\n// import { Days, MONTHS } from \"./const\";\n// import { range, getDaysInMonth, getSortedDays, areDatesTheSame, getDateobj } from \"./util\";\n// import { useState, useEffect } from \"react\";\n// import { EventModal } from \"./addEventModal/addEventModal\";\n// import \"./addEventModal/addEventModal.css\";\n\n// export const Calender = ({ startingDate, eventsArr, addEvent, editEvent, removeEvent }) => {\n//     const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\n//     const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\n//     const DaysInMonth = getDaysInMonth(currentMonth, currentYear);\n//     const [selectedDay, setSelectedDay] = useState(new Date().getDay());\n//     const [selectedEvent, setSelectedEvent] = useState(null);\n//     const [eventForm, setEventForm] = useState(null);\n//     const [showDeleteButton, setShowDeleteButton] = useState(false);\n\n//     const [Modal, setModal] = useState(false);\n\n//     const toggelModal = () => {\n//         setModal(!Modal);\n//     };\n\n//     const nextMonth = () => {\n//         if (currentMonth < 11) {\n//             setCurrentMonth((prev) => prev + 1);\n//         }\n//         else {\n//             setCurrentMonth(0);\n//             setCurrentYear((prev) => prev + 1);\n//         }\n//     };\n\n//     const prevMonth = () => {\n//         if (currentMonth > 0) {\n//             setCurrentMonth((prev) => prev - 1);\n//         }\n//         else {\n//             setCurrentMonth(11);\n//             setCurrentYear((prev) => prev - 1);\n//         }\n//     };\n\n//     const loadData = (thisevent) => {\n//         const eventOnDay = eventsArr.find((event) =>\n//             event.title === thisevent.title &&\n//             event.date === thisevent.date &&\n//             event.reminderTime === thisevent.reminderTime\n//         );\n//         setEventForm(eventOnDay || null);\n//         setSelectedEvent(eventOnDay);\n//     }\n\n//     const onAddEditEvent = (event, data, selectedDay) => {\n//         event.preventDefault();\n//         if (selectedEvent) {\n//             editEvent(selectedEvent, data);\n//             setSelectedEvent(null);\n//         }\n//         else {\n//             addEvent(data, selectedDay);\n//         }\n//         toggelModal();\n//         setEventForm(null);\n\n//     }\n\n//     const onRemoveEvent = (eventToBeDel) => {\n//         removeEvent(eventToBeDel);\n//         toggelModal();\n//         setEventForm(null);\n//         setSelectedEvent(null);\n//     }\n\n//     return (\n//         <Wrapper>\n//             <CalenderHead>\n//                 <Icon.ArrowLeftCircleFill onClick={prevMonth} />\n//                 <p className=\"m-0\">{MONTHS[currentMonth]} {currentYear}</p>\n//                 <Icon.ArrowRightCircleFill onClick={nextMonth} />\n//             </CalenderHead>\n//             <SevenColGrid>\n//                 {getSortedDays(currentMonth, currentYear).map((day) => (\n//                     <HeadDay>{day}</HeadDay>\n//                 ))}\n//             </SevenColGrid>\n//             <CalenderBody fourCol={DaysInMonth === 28}>\n//                 {range(DaysInMonth).map((day) => {\n\n//                     return (\n//                         <>\n//                             <StyledDay\n//                                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\n//                                 onClick={(e) => {\n//                                     setSelectedDay(getDateobj(day, currentMonth, currentYear));\n//                                     setEventForm(null);\n//                                     setShowDeleteButton(false);\n//                                     toggelModal();\n//                                 }}\n//                                 active={\n//                                     areDatesTheSame(new Date(), getDateobj(day, currentMonth, currentYear))\n//                                 }>\n//                                 <p>{day}</p>\n//                                 {\n//                                     eventsArr.map((event) =>\n//                                         areDatesTheSame(\n//                                             getDateobj(day, currentMonth, currentYear),\n//                                             event.date\n//                                         )\n//                                         &&\n//                                         <StyledEvent>\n//                                             <span className=\"w-100 text-start\" type=\"button\" onClick={(e) => {\n//                                                 e.stopPropagation();\n//                                                 loadData(event);\n//                                                 setShowDeleteButton(true);\n//                                                 toggelModal();\n//                                             }}>{event.title}</span>\n//                                             {/* <button className=\"border-0 bg-transparent\"><Icon.XLg className=\"ms-2\" onClick={(e) => {\n//                                         e.stopPropagation();\n//                                         onRemoveEvent(event.date, event.title);\n//                                     }} /></button> */}\n//                                         </StyledEvent>\n//                                     )\n//                                 }\n//                             </StyledDay>\n//                             {Modal &&\n//                                 <div className=\"modal\">\n//                                     <div onClick={toggelModal} className=\"overlay\">\n//                                         <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n//                                             <h4 className=\"form-heading\">Event</h4>\n//                                             <button type=\"button\" className=\"close-btn\" onClick={toggelModal}><Icon.XLg /></button>\n//                                             {\n//                                                 showDeleteButton &&\n//                                                 <button className=\"delete-btn\" onClick={(e) => {\n//                                                     e.stopPropagation();\n//                                                     onRemoveEvent(eventForm);\n//                                                 }}><Icon.Trash3 /></button>\n//                                             }\n//                                             <form>\n//                                                 <div className=\"form-group mb-3\">\n//                                                     <label className=\"form-label\">Title</label>\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.title : \"\"} onChange={(e) => setEventForm({ ...eventForm, title: e.target.value })} type=\"text\" placeholder=\"Event Tilte\" required></input>\n//                                                 </div>\n//                                                 <div className=\"form-group mb-3\">\n//                                                     <label className=\"form-label\">Description</label>\n//                                                     <textarea className=\"form-control\" rows=\"3\" value={eventForm ? eventForm.desc : \"\"} onChange={(e) => setEventForm({ ...eventForm, desc: e.target.value })} placeholder=\"Event description\" required />\n//                                                 </div>\n//                                                 <div className=\"form-group mb-3\">\n//                                                     <label className=\"form-label\">Reminder Time</label>\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.reminderTime : \"\"} onChange={(e) => setEventForm({ ...eventForm, reminderTime: e.target.value })} type=\"text\" placeholder=\"hh:mm\" required></input>\n//                                                 </div>\n//                                                 <div className=\"d-flex justify-content-end\">\n//                                                     <button className=\"save-event\" onClick={(e) => {\n//                                                         e.stopPropagation();\n//                                                         onAddEditEvent(e, eventForm, selectedDay);\n//                                                     }}>Save</button>\n//                                                 </div>\n//                                             </form>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             }\n//                         </>\n//                     )\n//                 })}\n//             </CalenderBody>\n\n//         </Wrapper>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/Calender/calender.js"],"sourcesContent":["// import { Wrapper, CalenderHead, SevenColGrid, HeadDay, CalenderBody, StyledDay, StyledEvent } from \"./styled\"\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import * as Icon from 'react-bootstrap-icons';\r\n// import { Days, MONTHS } from \"./const\";\r\n// import { range, getDaysInMonth, getSortedDays, areDatesTheSame, getDateobj } from \"./util\";\r\n// import { useState, useEffect } from \"react\";\r\n// import { EventModal } from \"./addEventModal/addEventModal\";\r\n// import \"./addEventModal/addEventModal.css\";\r\n\r\n// export const Calender = ({ startingDate, eventsArr, addEvent, editEvent, removeEvent }) => {\r\n//     const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());\r\n//     const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());\r\n//     const DaysInMonth = getDaysInMonth(currentMonth, currentYear);\r\n//     const [selectedDay, setSelectedDay] = useState(new Date().getDay());\r\n//     const [selectedEvent, setSelectedEvent] = useState(null);\r\n//     const [eventForm, setEventForm] = useState(null);\r\n//     const [showDeleteButton, setShowDeleteButton] = useState(false);\r\n\r\n//     const [Modal, setModal] = useState(false);\r\n\r\n//     const toggelModal = () => {\r\n//         setModal(!Modal);\r\n//     };\r\n\r\n//     const nextMonth = () => {\r\n//         if (currentMonth < 11) {\r\n//             setCurrentMonth((prev) => prev + 1);\r\n//         }\r\n//         else {\r\n//             setCurrentMonth(0);\r\n//             setCurrentYear((prev) => prev + 1);\r\n//         }\r\n//     };\r\n\r\n//     const prevMonth = () => {\r\n//         if (currentMonth > 0) {\r\n//             setCurrentMonth((prev) => prev - 1);\r\n//         }\r\n//         else {\r\n//             setCurrentMonth(11);\r\n//             setCurrentYear((prev) => prev - 1);\r\n//         }\r\n//     };\r\n\r\n//     const loadData = (thisevent) => {\r\n//         const eventOnDay = eventsArr.find((event) =>\r\n//             event.title === thisevent.title &&\r\n//             event.date === thisevent.date &&\r\n//             event.reminderTime === thisevent.reminderTime\r\n//         );\r\n//         setEventForm(eventOnDay || null);\r\n//         setSelectedEvent(eventOnDay);\r\n//     }\r\n\r\n//     const onAddEditEvent = (event, data, selectedDay) => {\r\n//         event.preventDefault();\r\n//         if (selectedEvent) {\r\n//             editEvent(selectedEvent, data);\r\n//             setSelectedEvent(null);\r\n//         }\r\n//         else {\r\n//             addEvent(data, selectedDay);\r\n//         }\r\n//         toggelModal();\r\n//         setEventForm(null);\r\n\r\n//     }\r\n\r\n//     const onRemoveEvent = (eventToBeDel) => {\r\n//         removeEvent(eventToBeDel);\r\n//         toggelModal();\r\n//         setEventForm(null);\r\n//         setSelectedEvent(null);\r\n//     }\r\n\r\n//     return (\r\n//         <Wrapper>\r\n//             <CalenderHead>\r\n//                 <Icon.ArrowLeftCircleFill onClick={prevMonth} />\r\n//                 <p className=\"m-0\">{MONTHS[currentMonth]} {currentYear}</p>\r\n//                 <Icon.ArrowRightCircleFill onClick={nextMonth} />\r\n//             </CalenderHead>\r\n//             <SevenColGrid>\r\n//                 {getSortedDays(currentMonth, currentYear).map((day) => (\r\n//                     <HeadDay>{day}</HeadDay>\r\n//                 ))}\r\n//             </SevenColGrid>\r\n//             <CalenderBody fourCol={DaysInMonth === 28}>\r\n//                 {range(DaysInMonth).map((day) => {\r\n\r\n//                     return (\r\n//                         <>\r\n//                             <StyledDay\r\n//                                 // onClick={(e) => onAddEvent(e, getDateobj(day, currentMonth, currentYear))}\r\n//                                 onClick={(e) => {\r\n//                                     setSelectedDay(getDateobj(day, currentMonth, currentYear));\r\n//                                     setEventForm(null);\r\n//                                     setShowDeleteButton(false);\r\n//                                     toggelModal();\r\n//                                 }}\r\n//                                 active={\r\n//                                     areDatesTheSame(new Date(), getDateobj(day, currentMonth, currentYear))\r\n//                                 }>\r\n//                                 <p>{day}</p>\r\n//                                 {\r\n//                                     eventsArr.map((event) =>\r\n//                                         areDatesTheSame(\r\n//                                             getDateobj(day, currentMonth, currentYear),\r\n//                                             event.date\r\n//                                         )\r\n//                                         &&\r\n//                                         <StyledEvent>\r\n//                                             <span className=\"w-100 text-start\" type=\"button\" onClick={(e) => {\r\n//                                                 e.stopPropagation();\r\n//                                                 loadData(event);\r\n//                                                 setShowDeleteButton(true);\r\n//                                                 toggelModal();\r\n//                                             }}>{event.title}</span>\r\n//                                             {/* <button className=\"border-0 bg-transparent\"><Icon.XLg className=\"ms-2\" onClick={(e) => {\r\n//                                         e.stopPropagation();\r\n//                                         onRemoveEvent(event.date, event.title);\r\n//                                     }} /></button> */}\r\n//                                         </StyledEvent>\r\n//                                     )\r\n//                                 }\r\n//                             </StyledDay>\r\n//                             {Modal &&\r\n//                                 <div className=\"modal\">\r\n//                                     <div onClick={toggelModal} className=\"overlay\">\r\n//                                         <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n//                                             <h4 className=\"form-heading\">Event</h4>\r\n//                                             <button type=\"button\" className=\"close-btn\" onClick={toggelModal}><Icon.XLg /></button>\r\n//                                             {\r\n//                                                 showDeleteButton &&\r\n//                                                 <button className=\"delete-btn\" onClick={(e) => {\r\n//                                                     e.stopPropagation();\r\n//                                                     onRemoveEvent(eventForm);\r\n//                                                 }}><Icon.Trash3 /></button>\r\n//                                             }\r\n//                                             <form>\r\n//                                                 <div className=\"form-group mb-3\">\r\n//                                                     <label className=\"form-label\">Title</label>\r\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.title : \"\"} onChange={(e) => setEventForm({ ...eventForm, title: e.target.value })} type=\"text\" placeholder=\"Event Tilte\" required></input>\r\n//                                                 </div>\r\n//                                                 <div className=\"form-group mb-3\">\r\n//                                                     <label className=\"form-label\">Description</label>\r\n//                                                     <textarea className=\"form-control\" rows=\"3\" value={eventForm ? eventForm.desc : \"\"} onChange={(e) => setEventForm({ ...eventForm, desc: e.target.value })} placeholder=\"Event description\" required />\r\n//                                                 </div>\r\n//                                                 <div className=\"form-group mb-3\">\r\n//                                                     <label className=\"form-label\">Reminder Time</label>\r\n//                                                     <input className=\"form-control\" value={eventForm ? eventForm.reminderTime : \"\"} onChange={(e) => setEventForm({ ...eventForm, reminderTime: e.target.value })} type=\"text\" placeholder=\"hh:mm\" required></input>\r\n//                                                 </div>\r\n//                                                 <div className=\"d-flex justify-content-end\">\r\n//                                                     <button className=\"save-event\" onClick={(e) => {\r\n//                                                         e.stopPropagation();\r\n//                                                         onAddEditEvent(e, eventForm, selectedDay);\r\n//                                                     }}>Save</button>\r\n//                                                 </div>\r\n//                                             </form>\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             }\r\n//                         </>\r\n//                     )\r\n//                 })}\r\n//             </CalenderBody>\r\n\r\n//         </Wrapper>\r\n//     )\r\n// }\r\n\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}