{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents,Reminders } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// // function App() {\n// //   const [events, setEvents] = useState(() => {\n// //     const storedEvents = localStorage.getItem('events');\n// //     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n// //   });\n\n// //   useEffect(() => {\n// //     localStorage.setItem('events', JSON.stringify(events));\n// //     const timeouts = [];\n\n// //     // events.forEach((event) => {\n// //     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n// //     //   if (event.date) {\n// //     //     const reminderTime = new Date(\n// //     //       parseInt(event.date.slice(0, 4)),\n// //     //       parseInt(event.date.slice(5, 7)) - 1,\n// //     //       parseInt(event.date.slice(8, 10))\n// //     //     );\n// //     //     reminderTime.setHours(hours);\n// //     //     reminderTime.setMinutes(minutes);\n\n// //     //     if (reminderTime > new Date()) {\n// //     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n// //     //       const timeoutId = setTimeout(() => {\n// //     //         toast.info(event.title + \"\\nReminder\");\n// //     //         const index = timeouts.indexOf(timeoutId);\n// //     //         if (index > -1) {\n// //     //           timeouts.splice(index, 1);\n// //     //         }\n// //     //       }, timeUntilEvent);\n\n// //     //       timeouts.push(timeoutId);\n// //     //     }\n// //     //   }\n// //     // });\n\n// //     // return () => {\n// //     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n// //     // };\n// //   }, [events]);\n\n// //   const addEvent = (data, date) => {\n// //     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n// //     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, EventTime: data.time ,ReminderTime:data.reminder}]);\n// //   };\n\n// //   const editEvent = (eventToBeEdited, newData) => {\n// //     setEvents((prev) =>\n// //       prev.map((event) =>\n// //         event === eventToBeEdited\n// //           ? { ...event, title: newData.title, desc: newData.desc, EventTime: newData.time ,ReminderTime:newData.reminder}\n// //           : event\n// //       )\n// //     );\n// //   };\n\n// //   const removeEvent = (eventToBeDeleted) => {\n// //     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date ));\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <ToastContainer />\n// //       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n// //     </div>\n// //   );\n// // }\n// function App() {\n//   const storedEvents = localStorage.getItem('events');\n//   const storedReminders = localStorage.getItem('reminders');\n\n//   const [events, setEvents] = useState(storedEvents ? JSON.parse(storedEvents) : MockEvents);\n\n//   const [reminders, setReminders] = useState(storedReminders ? JSON.parse(storedReminders) : Reminders);\n\n//   // function to convert a dateString into the date object\n//   // function to convert a dateString into the date object\n// const getDateFromString = (dateString) => {\n//   const year = parseInt(dateString?.slice(0, 4) ?? 0);\n//   const month = parseInt(dateString?.slice(5, 7) ?? 0) - 1;\n//   const day = parseInt(dateString?.slice(8, 10) ?? 0);\n//   const hours = parseInt(dateString?.slice(11, 13) ?? 0);\n//   const minutes = parseInt(dateString?.slice(14, 16) ?? 0);\n\n//   return new Date(year, month, day, hours, minutes);\n// };\n\n//   // useEffect hook to update events in localstorage and also to setreminders\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const intervals = []; // Array to store the setInterval identifiers\n\n//     events.forEach((event) => {\n//       const reminderFullDate = getDateFromString(event.reminderFullDate);\n//       const eventFullDate = getDateFromString(event.eventFullDate);\n//       const reminderFullDateUtcString = new Date(reminderFullDate.getTime() - reminderFullDate.getTimezoneOffset() * 60000).toISOString();\n//       const eventFullDateUtcString = new Date(eventFullDate.getTime() - eventFullDate.getTimezoneOffset() * 60000).toISOString();\n\n//       if (reminderFullDate > new Date()) {\n//         const checkInterval = setInterval(() => {\n//           const timeRemaining = reminderFullDate.getTime() - Date.now();\n//           if (timeRemaining <= 0) {\n//             clearInterval(checkInterval);\n//             toast.info(\"Reminder for the event '\" + event.title + \"'\");\n//             setReminders(prev => [...prev, { title: event.title, remainingTime: eventFullDate.getTime() - Date.now(), date: event.date, eventTime: event.eventTime, reminderFullDate: reminderFullDateUtcString, eventFullDate: eventFullDateUtcString }]);\n//           }\n//         }, 1000); // Interval time in milliseconds\n\n//         intervals.push(checkInterval);\n//       }\n//     });\n\n//     // Cleanup function to clear any remaining intervals\n//     return () => {\n//       intervals.forEach((intervalId) => clearInterval(intervalId));\n//     };\n//   }, [events]);\n\n//   // useEffect hook to update the reminders in the localstorage when they are updated\n//   useEffect(() => {\n//     localStorage.setItem('reminders', JSON.stringify(reminders));\n//   }, [reminders]);\n\n//   // useEffect hook to update the remaining time in the reminders eve\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setReminders(prev => {\n//         const updatedReminders = prev.map(reminder => {\n//           const eventFullDate = getDateFromString(reminder.eventFullDate);\n//           const remainingTime = eventFullDate.getTime() - Date.now();\n\n//           return (remainingTime <= 0 ? null : { ...reminder, remainingTime });\n\n//         }).filter(reminder => reminder !== null); // Filter out null reminders\n\n//         return updatedReminders;\n//       });\n//     }, 60000);\n\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, []);\n\n//   // function to get the utcDateString, utcReminderDateString and eventTime\n//   const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n//     const utcDateString = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())).toISOString();\n//     // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n//     const utcReminderDateString = new Date(reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000).toISOString();\n//     const [eventHours, eventMinutes] = data.eventTime.split(\":\").map(Number);\n//     const eventTime = new Date(Date.UTC(\n//       parseInt(utcDateString.slice(0, 4)),   // Year\n//       parseInt(utcDateString.slice(5, 7)) - 1,   // Month (0-based)\n//       parseInt(utcDateString.slice(8, 10)),  // Day\n//     ));\n//     eventTime.setUTCHours(eventHours);\n//     eventTime.setUTCMinutes(eventMinutes);\n\n//     return [utcDateString, utcReminderDateString, eventTime]\n//   }\n\n//   // This function will return the reminderDateTime in the hh:mm string format\n//   const remindeTimeString = (reminderTimeDate) => {\n//     const hours = reminderTimeDate.getHours().toString().padStart(2, '0');\n//     const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0');\n//     const reminderTime = `${hours}:${minutes}`;\n\n//     return reminderTime;\n//   }\n\n//   // function to add an event\n//   const addEvent = (data, date, reminderTimeDate) => {\n//     const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, data, reminderTimeDate);\n//     const reminderTime = remindeTimeString(reminderTimeDate);\n\n//     setEvents(prev => [...prev,\n//     {\n//       date: utcDateString,\n//       title: data.title,\n//       desc: data.desc,\n//       eventTime: data.eventTime,\n//       reminderTime: reminderTime,\n//       reminderFullDate: utcReminderDateString,\n//       eventFullDate: eventTime.toISOString(),\n//       color: data.color\n//     }]);\n//   }\n\n//   // function to edit event\n//   const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n//     const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, newData, reminderTimeDate);\n//     const reminderTime = remindeTimeString(reminderTimeDate);\n\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? {\n//             ...event,\n//             title: newData.title,\n//             desc: newData.desc,\n//             eventTime: newData.eventTime,\n//             reminderTime: reminderTime,\n//             reminderFullDate: utcReminderDateString,\n//             eventFullDate: eventTime.toISOString(),\n//             color: newData.color\n//           } : event\n//       )\n//     );\n//   }\n\n//   // function to remove an event\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents(prev => prev.filter(event =>\n//       event.title !== eventToBeDeleted.title ||\n//       event.date !== eventToBeDeleted.date ||\n//       event.reminderTime !== eventToBeDeleted.reminderTime\n//     ));\n//   };\n\n//   // function to remove the reminder\n//   const removeReminder = (reminderToBeRemoved) => {\n//     setReminders(prev => prev.filter(reminder => reminder !== reminderToBeRemoved))\n//   }\n\n//   // function to snooze a reminder for an event\n//   const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n//     const utcDateString = new Date(snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000).toISOString();\n//     const reminderTime = remindeTimeString(snoozeTime);\n\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event.title === reminderToBeSnoozed.title &&\n//           event.date === reminderToBeSnoozed.date &&\n//           event.eventTime === reminderToBeSnoozed.eventTime\n//           ? { ...event, reminderTime: reminderTime, reminderFullDate: utcDateString }\n//           : event\n//       )\n//     );\n\n//     setReminders(prev => prev.filter(reminder => reminder !== reminderToBeSnoozed));\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender className=\"modal-content\"\n//         startingDate={new Date()}\n//         eventsArr={events}\n//         addEvent={addEvent}\n//         editEvent={editEvent}\n//         removeEvent={removeEvent}\n//         remindersArr={reminders}\n//         removeReminder={removeReminder}\n//         snoozeForReminder={snoozeReminder}\n//       />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nimport './App.css';\nimport { Calender } from './Calender/calender';\nimport { MockEvents, Reminders } from './Calender/const';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const storedEvents = localStorage.getItem('events');\n  const storedReminders = localStorage.getItem('reminders');\n  const [events, setEvents] = useState(storedEvents ? JSON.parse(storedEvents) : MockEvents);\n  const [reminders, setReminders] = useState(storedReminders ? JSON.parse(storedReminders) : Reminders);\n\n  // function to convert a dateString into the date object\n  const getDateFromString = dateString => {\n    const year = parseInt(dateString.slice(0, 4));\n    const month = parseInt(dateString.slice(5, 7) - 1);\n    const day = parseInt(dateString.slice(8, 10));\n    const hours = parseInt(dateString.slice(11, 13));\n    const minutes = parseInt(dateString.slice(14, 16));\n    return new Date(year, month, day, hours, minutes);\n  };\n\n  // useEffect hook to update events in localstorage and also to setreminders\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const intervals = [];\n    events.forEach(event => {\n      var _event$reminderFullDa, _event$eventFullDate;\n      const reminderFullDate = (_event$reminderFullDa = event.reminderFullDate) === null || _event$reminderFullDa === void 0 ? void 0 : _event$reminderFullDa.trim(); // Add optional chaining operator here\n      const eventFullDate = (_event$eventFullDate = event.eventFullDate) === null || _event$eventFullDate === void 0 ? void 0 : _event$eventFullDate.trim(); // Add optional chaining operator here\n\n      if (reminderFullDate && eventFullDate) {\n        // Check if values are defined\n        const reminderFullDateObj = getDateFromString(reminderFullDate);\n        const eventFullDateObj = getDateFromString(eventFullDate);\n        const reminderFullDateUtcString = new Date(reminderFullDateObj.getTime() - reminderFullDateObj.getTimezoneOffset() * 60000).toISOString();\n        const eventFullDateUtcString = new Date(eventFullDateObj.getTime() - eventFullDateObj.getTimezoneOffset() * 60000).toISOString();\n        if (reminderFullDateObj > new Date()) {\n          const checkInterval = setInterval(() => {\n            const timeRemaining = reminderFullDateObj.getTime() - Date.now();\n            if (timeRemaining <= 0) {\n              clearInterval(checkInterval);\n              toast.info(\"Reminder for the event '\" + event.title + \"'\");\n              setReminders(prev => [...prev, {\n                title: event.title,\n                remainingTime: eventFullDateObj.getTime() - Date.now(),\n                date: event.date,\n                eventTime: event.eventTime,\n                reminderFullDate: reminderFullDateUtcString,\n                eventFullDate: eventFullDateUtcString\n              }]);\n            }\n          }, 1000);\n          intervals.push(checkInterval);\n        }\n      }\n    });\n    return () => {\n      intervals.forEach(intervalId => clearInterval(intervalId));\n    };\n  }, [events]);\n\n  // Cleanup function to clear any remaining intervals\n\n  // useEffect hook to update the reminders in the localstorage when they are updated\n  useEffect(() => {\n    localStorage.setItem('reminders', JSON.stringify(reminders));\n  }, [reminders]);\n\n  // useEffect hook to update the remaining time in the reminders eve\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setReminders(prev => {\n        const updatedReminders = prev.map(reminder => {\n          const eventFullDate = getDateFromString(reminder.eventFullDate);\n          const remainingTime = eventFullDate.getTime() - Date.now();\n          return remainingTime <= 0 ? null : {\n            ...reminder,\n            remainingTime\n          };\n        }).filter(reminder => reminder !== null); // Filter out null reminders\n\n        return updatedReminders;\n      });\n    }, 60000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  // function to get the utcDateString, utcReminderDateString and eventTime\n  const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n    const utcDateString = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())).toISOString();\n    // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n    const utcReminderDateString = new Date(reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000).toISOString();\n    const [eventHours, eventMinutes] = data.eventTime.split(':').map(Number);\n    const eventTime = new Date(Date.UTC(parseInt(utcDateString.slice(0, 4)),\n    // Year\n    parseInt(utcDateString.slice(5, 7)) - 1,\n    // Month (0-based)\n    parseInt(utcDateString.slice(8, 10)) // Day\n    ));\n\n    eventTime.setUTCHours(eventHours);\n    eventTime.setUTCMinutes(eventMinutes);\n    return [utcDateString, utcReminderDateString, eventTime];\n  };\n\n  // This function will return the reminderDateTime in the hh:mm string format\n  const remindeTimeString = reminderTimeDate => {\n    const hours = reminderTimeDate.getHours().toString().padStart(2, '0');\n    const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0');\n    const reminderTime = `${hours}:${minutes}`;\n    return reminderTime;\n  };\n\n  // function to add an event\n  const addEvent = (data, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, data, reminderTimeDate);\n    const reminderTime = remindeTimeString(reminderTimeDate);\n    setEvents(prev => [...prev, {\n      date: utcDateString,\n      title: data.title,\n      desc: data.desc,\n      eventTime: data.eventTime,\n      reminderTime: reminderTime,\n      reminderFullDate: utcReminderDateString,\n      eventFullDate: eventTime.toISOString(),\n      color: data.color\n    }]);\n  };\n\n  // function to edit event\n  const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, newData, reminderTimeDate);\n    const reminderTime = remindeTimeString(reminderTimeDate);\n    setEvents(prev => prev.map(event => event === eventToBeEdited ? {\n      ...event,\n      title: newData.title,\n      desc: newData.desc,\n      eventTime: newData.eventTime,\n      reminderTime: reminderTime,\n      reminderFullDate: utcReminderDateString,\n      eventFullDate: eventTime.toISOString(),\n      color: newData.color\n    } : event));\n  };\n\n  // function to remove an event\n  const removeEvent = eventToBeDeleted => {\n    setEvents(prev => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n  };\n\n  // function to remove the reminder\n  const removeReminder = reminderToBeRemoved => {\n    setReminders(prev => prev.filter(reminder => reminder !== reminderToBeRemoved));\n  };\n\n  // function to snooze a reminder for an event\n  const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n    const utcDateString = new Date(snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000).toISOString();\n    const reminderTime = remindeTimeString(snoozeTime);\n    setEvents(prev => prev.map(event => event.title === reminderToBeSnoozed.title && event.date === reminderToBeSnoozed.date && event.eventTime === reminderToBeSnoozed.eventTime ? {\n      ...event,\n      reminderTime: reminderTime,\n      reminderFullDate: utcDateString\n    } : event));\n    setReminders(prev => prev.filter(reminder => reminder !== reminderToBeSnoozed));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calender, {\n      className: \"modal-content\",\n      startingDate: new Date(),\n      eventsArr: events,\n      addEvent: addEvent,\n      editEvent: editEvent,\n      removeEvent: removeEvent,\n      remindersArr: reminders,\n      removeReminder: removeReminder,\n      snoozeForReminder: snoozeReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 583,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uPu41fKmGelvuj00TUIvtWmy5C8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Calender","MockEvents","Reminders","useState","useEffect","ToastContainer","toast","jsxDEV","_jsxDEV","App","_s","storedEvents","localStorage","getItem","storedReminders","events","setEvents","JSON","parse","reminders","setReminders","getDateFromString","dateString","year","parseInt","slice","month","day","hours","minutes","Date","setItem","stringify","intervals","forEach","event","_event$reminderFullDa","_event$eventFullDate","reminderFullDate","trim","eventFullDate","reminderFullDateObj","eventFullDateObj","reminderFullDateUtcString","getTime","getTimezoneOffset","toISOString","eventFullDateUtcString","checkInterval","setInterval","timeRemaining","now","clearInterval","info","title","prev","remainingTime","date","eventTime","push","intervalId","interval","updatedReminders","map","reminder","filter","getRemdAndEventTime","data","reminderTimeDate","utcDateString","UTC","getFullYear","getMonth","getDate","utcReminderDateString","eventHours","eventMinutes","split","Number","setUTCHours","setUTCMinutes","remindeTimeString","getHours","toString","padStart","getMinutes","reminderTime","addEvent","desc","color","editEvent","eventToBeEdited","newData","removeEvent","eventToBeDeleted","removeReminder","reminderToBeRemoved","snoozeReminder","reminderToBeSnoozed","snoozeTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startingDate","eventsArr","remindersArr","snoozeForReminder","_c","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/App.js"],"sourcesContent":["// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents,Reminders } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// // function App() {\n// //   const [events, setEvents] = useState(() => {\n// //     const storedEvents = localStorage.getItem('events');\n// //     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n// //   });\n\n// //   useEffect(() => {\n// //     localStorage.setItem('events', JSON.stringify(events));\n// //     const timeouts = [];\n\n// //     // events.forEach((event) => {\n// //     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n// //     //   if (event.date) {\n// //     //     const reminderTime = new Date(\n// //     //       parseInt(event.date.slice(0, 4)),\n// //     //       parseInt(event.date.slice(5, 7)) - 1,\n// //     //       parseInt(event.date.slice(8, 10))\n// //     //     );\n// //     //     reminderTime.setHours(hours);\n// //     //     reminderTime.setMinutes(minutes);\n\n// //     //     if (reminderTime > new Date()) {\n// //     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n// //     //       const timeoutId = setTimeout(() => {\n// //     //         toast.info(event.title + \"\\nReminder\");\n// //     //         const index = timeouts.indexOf(timeoutId);\n// //     //         if (index > -1) {\n// //     //           timeouts.splice(index, 1);\n// //     //         }\n// //     //       }, timeUntilEvent);\n\n// //     //       timeouts.push(timeoutId);\n// //     //     }\n// //     //   }\n// //     // });\n\n// //     // return () => {\n// //     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n// //     // };\n// //   }, [events]);\n\n// //   const addEvent = (data, date) => {\n// //     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n// //     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, EventTime: data.time ,ReminderTime:data.reminder}]);\n// //   };\n\n// //   const editEvent = (eventToBeEdited, newData) => {\n// //     setEvents((prev) =>\n// //       prev.map((event) =>\n// //         event === eventToBeEdited\n// //           ? { ...event, title: newData.title, desc: newData.desc, EventTime: newData.time ,ReminderTime:newData.reminder}\n// //           : event\n// //       )\n// //     );\n// //   };\n\n// //   const removeEvent = (eventToBeDeleted) => {\n// //     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date ));\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <ToastContainer />\n// //       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n// //     </div>\n// //   );\n// // }\n// function App() {\n//   const storedEvents = localStorage.getItem('events');\n//   const storedReminders = localStorage.getItem('reminders');\n\n//   const [events, setEvents] = useState(storedEvents ? JSON.parse(storedEvents) : MockEvents);\n\n//   const [reminders, setReminders] = useState(storedReminders ? JSON.parse(storedReminders) : Reminders);\n\n//   // function to convert a dateString into the date object\n//   // function to convert a dateString into the date object\n// const getDateFromString = (dateString) => {\n//   const year = parseInt(dateString?.slice(0, 4) ?? 0);\n//   const month = parseInt(dateString?.slice(5, 7) ?? 0) - 1;\n//   const day = parseInt(dateString?.slice(8, 10) ?? 0);\n//   const hours = parseInt(dateString?.slice(11, 13) ?? 0);\n//   const minutes = parseInt(dateString?.slice(14, 16) ?? 0);\n\n//   return new Date(year, month, day, hours, minutes);\n// };\n\n//   // useEffect hook to update events in localstorage and also to setreminders\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const intervals = []; // Array to store the setInterval identifiers\n\n//     events.forEach((event) => {\n//       const reminderFullDate = getDateFromString(event.reminderFullDate);\n//       const eventFullDate = getDateFromString(event.eventFullDate);\n//       const reminderFullDateUtcString = new Date(reminderFullDate.getTime() - reminderFullDate.getTimezoneOffset() * 60000).toISOString();\n//       const eventFullDateUtcString = new Date(eventFullDate.getTime() - eventFullDate.getTimezoneOffset() * 60000).toISOString();\n\n//       if (reminderFullDate > new Date()) {\n//         const checkInterval = setInterval(() => {\n//           const timeRemaining = reminderFullDate.getTime() - Date.now();\n//           if (timeRemaining <= 0) {\n//             clearInterval(checkInterval);\n//             toast.info(\"Reminder for the event '\" + event.title + \"'\");\n//             setReminders(prev => [...prev, { title: event.title, remainingTime: eventFullDate.getTime() - Date.now(), date: event.date, eventTime: event.eventTime, reminderFullDate: reminderFullDateUtcString, eventFullDate: eventFullDateUtcString }]);\n//           }\n//         }, 1000); // Interval time in milliseconds\n\n//         intervals.push(checkInterval);\n//       }\n//     });\n\n//     // Cleanup function to clear any remaining intervals\n//     return () => {\n//       intervals.forEach((intervalId) => clearInterval(intervalId));\n//     };\n//   }, [events]);\n\n//   // useEffect hook to update the reminders in the localstorage when they are updated\n//   useEffect(() => {\n//     localStorage.setItem('reminders', JSON.stringify(reminders));\n//   }, [reminders]);\n\n//   // useEffect hook to update the remaining time in the reminders eve\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setReminders(prev => {\n//         const updatedReminders = prev.map(reminder => {\n//           const eventFullDate = getDateFromString(reminder.eventFullDate);\n//           const remainingTime = eventFullDate.getTime() - Date.now();\n\n//           return (remainingTime <= 0 ? null : { ...reminder, remainingTime });\n\n//         }).filter(reminder => reminder !== null); // Filter out null reminders\n\n//         return updatedReminders;\n//       });\n//     }, 60000);\n\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, []);\n\n//   // function to get the utcDateString, utcReminderDateString and eventTime\n//   const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n//     const utcDateString = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())).toISOString();\n//     // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n//     const utcReminderDateString = new Date(reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000).toISOString();\n//     const [eventHours, eventMinutes] = data.eventTime.split(\":\").map(Number);\n//     const eventTime = new Date(Date.UTC(\n//       parseInt(utcDateString.slice(0, 4)),   // Year\n//       parseInt(utcDateString.slice(5, 7)) - 1,   // Month (0-based)\n//       parseInt(utcDateString.slice(8, 10)),  // Day\n//     ));\n//     eventTime.setUTCHours(eventHours);\n//     eventTime.setUTCMinutes(eventMinutes);\n\n//     return [utcDateString, utcReminderDateString, eventTime]\n//   }\n\n//   // This function will return the reminderDateTime in the hh:mm string format\n//   const remindeTimeString = (reminderTimeDate) => {\n//     const hours = reminderTimeDate.getHours().toString().padStart(2, '0');\n//     const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0');\n//     const reminderTime = `${hours}:${minutes}`;\n\n//     return reminderTime;\n//   }\n\n//   // function to add an event\n//   const addEvent = (data, date, reminderTimeDate) => {\n//     const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, data, reminderTimeDate);\n//     const reminderTime = remindeTimeString(reminderTimeDate);\n\n//     setEvents(prev => [...prev,\n//     {\n//       date: utcDateString,\n//       title: data.title,\n//       desc: data.desc,\n//       eventTime: data.eventTime,\n//       reminderTime: reminderTime,\n//       reminderFullDate: utcReminderDateString,\n//       eventFullDate: eventTime.toISOString(),\n//       color: data.color\n//     }]);\n//   }\n\n//   // function to edit event\n//   const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n//     const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, newData, reminderTimeDate);\n//     const reminderTime = remindeTimeString(reminderTimeDate);\n\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? {\n//             ...event,\n//             title: newData.title,\n//             desc: newData.desc,\n//             eventTime: newData.eventTime,\n//             reminderTime: reminderTime,\n//             reminderFullDate: utcReminderDateString,\n//             eventFullDate: eventTime.toISOString(),\n//             color: newData.color\n//           } : event\n//       )\n//     );\n//   }\n\n//   // function to remove an event\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents(prev => prev.filter(event =>\n//       event.title !== eventToBeDeleted.title ||\n//       event.date !== eventToBeDeleted.date ||\n//       event.reminderTime !== eventToBeDeleted.reminderTime\n//     ));\n//   };\n\n//   // function to remove the reminder\n//   const removeReminder = (reminderToBeRemoved) => {\n//     setReminders(prev => prev.filter(reminder => reminder !== reminderToBeRemoved))\n//   }\n\n//   // function to snooze a reminder for an event\n//   const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n//     const utcDateString = new Date(snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000).toISOString();\n//     const reminderTime = remindeTimeString(snoozeTime);\n\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event.title === reminderToBeSnoozed.title &&\n//           event.date === reminderToBeSnoozed.date &&\n//           event.eventTime === reminderToBeSnoozed.eventTime\n//           ? { ...event, reminderTime: reminderTime, reminderFullDate: utcDateString }\n//           : event\n//       )\n//     );\n\n//     setReminders(prev => prev.filter(reminder => reminder !== reminderToBeSnoozed));\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender className=\"modal-content\"\n//         startingDate={new Date()}\n//         eventsArr={events}\n//         addEvent={addEvent}\n//         editEvent={editEvent}\n//         removeEvent={removeEvent}\n//         remindersArr={reminders}\n//         removeReminder={removeReminder}\n//         snoozeForReminder={snoozeReminder}\n//       />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nimport './App.css'\nimport { Calender } from './Calender/calender'\nimport { MockEvents, Reminders } from './Calender/const'\nimport { useState, useEffect } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nfunction App () {\n  const storedEvents = localStorage.getItem('events')\n  const storedReminders = localStorage.getItem('reminders')\n\n  const [events, setEvents] = useState(\n    storedEvents ? JSON.parse(storedEvents) : MockEvents\n  )\n\n  const [reminders, setReminders] = useState(\n    storedReminders ? JSON.parse(storedReminders) : Reminders\n  )\n\n  // function to convert a dateString into the date object\n  const getDateFromString = dateString => {\n    const year = parseInt(dateString.slice(0, 4))\n    const month = parseInt(dateString.slice(5, 7) - 1)\n    const day = parseInt(dateString.slice(8, 10))\n    const hours = parseInt(dateString.slice(11, 13))\n    const minutes = parseInt(dateString.slice(14, 16))\n\n    return new Date(year, month, day, hours, minutes)\n  }\n\n  // useEffect hook to update events in localstorage and also to setreminders\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events))\n    const intervals = []\n\n    events.forEach(event => {\n      const reminderFullDate = event.reminderFullDate?.trim() // Add optional chaining operator here\n      const eventFullDate = event.eventFullDate?.trim() // Add optional chaining operator here\n\n      if (reminderFullDate && eventFullDate) {\n        // Check if values are defined\n        const reminderFullDateObj = getDateFromString(reminderFullDate)\n        const eventFullDateObj = getDateFromString(eventFullDate)\n        const reminderFullDateUtcString = new Date(\n          reminderFullDateObj.getTime() -\n            reminderFullDateObj.getTimezoneOffset() * 60000\n        ).toISOString()\n        const eventFullDateUtcString = new Date(\n          eventFullDateObj.getTime() -\n            eventFullDateObj.getTimezoneOffset() * 60000\n        ).toISOString()\n\n        if (reminderFullDateObj > new Date()) {\n          const checkInterval = setInterval(() => {\n            const timeRemaining = reminderFullDateObj.getTime() - Date.now()\n            if (timeRemaining <= 0) {\n              clearInterval(checkInterval)\n              toast.info(\"Reminder for the event '\" + event.title + \"'\")\n              setReminders(prev => [\n                ...prev,\n                {\n                  title: event.title,\n                  remainingTime: eventFullDateObj.getTime() - Date.now(),\n                  date: event.date,\n                  eventTime: event.eventTime,\n                  reminderFullDate: reminderFullDateUtcString,\n                  eventFullDate: eventFullDateUtcString\n                }\n              ])\n            }\n          }, 1000)\n\n          intervals.push(checkInterval)\n        }\n      }\n    })\n\n    return () => {\n      intervals.forEach(intervalId => clearInterval(intervalId))\n    }\n  }, [events])\n\n  // Cleanup function to clear any remaining intervals\n\n  // useEffect hook to update the reminders in the localstorage when they are updated\n  useEffect(() => {\n    localStorage.setItem('reminders', JSON.stringify(reminders))\n  }, [reminders])\n\n  // useEffect hook to update the remaining time in the reminders eve\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setReminders(prev => {\n        const updatedReminders = prev\n          .map(reminder => {\n            const eventFullDate = getDateFromString(reminder.eventFullDate)\n            const remainingTime = eventFullDate.getTime() - Date.now()\n\n            return remainingTime <= 0 ? null : { ...reminder, remainingTime }\n          })\n          .filter(reminder => reminder !== null) // Filter out null reminders\n\n        return updatedReminders\n      })\n    }, 60000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  // function to get the utcDateString, utcReminderDateString and eventTime\n  const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n    const utcDateString = new Date(\n      Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n    ).toISOString()\n    // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n    const utcReminderDateString = new Date(\n      reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000\n    ).toISOString()\n    const [eventHours, eventMinutes] = data.eventTime.split(':').map(Number)\n    const eventTime = new Date(\n      Date.UTC(\n        parseInt(utcDateString.slice(0, 4)), // Year\n        parseInt(utcDateString.slice(5, 7)) - 1, // Month (0-based)\n        parseInt(utcDateString.slice(8, 10)) // Day\n      )\n    )\n    eventTime.setUTCHours(eventHours)\n    eventTime.setUTCMinutes(eventMinutes)\n\n    return [utcDateString, utcReminderDateString, eventTime]\n  }\n\n  // This function will return the reminderDateTime in the hh:mm string format\n  const remindeTimeString = reminderTimeDate => {\n    const hours = reminderTimeDate.getHours().toString().padStart(2, '0')\n    const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0')\n    const reminderTime = `${hours}:${minutes}`\n\n    return reminderTime\n  }\n\n  // function to add an event\n  const addEvent = (data, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] =\n      getRemdAndEventTime(date, data, reminderTimeDate)\n    const reminderTime = remindeTimeString(reminderTimeDate)\n\n    setEvents(prev => [\n      ...prev,\n      {\n        date: utcDateString,\n        title: data.title,\n        desc: data.desc,\n        eventTime: data.eventTime,\n        reminderTime: reminderTime,\n        reminderFullDate: utcReminderDateString,\n        eventFullDate: eventTime.toISOString(),\n        color: data.color\n      }\n    ])\n  }\n\n  // function to edit event\n  const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] =\n      getRemdAndEventTime(date, newData, reminderTimeDate)\n    const reminderTime = remindeTimeString(reminderTimeDate)\n\n    setEvents(prev =>\n      prev.map(event =>\n        event === eventToBeEdited\n          ? {\n              ...event,\n              title: newData.title,\n              desc: newData.desc,\n              eventTime: newData.eventTime,\n              reminderTime: reminderTime,\n              reminderFullDate: utcReminderDateString,\n              eventFullDate: eventTime.toISOString(),\n              color: newData.color\n            }\n          : event\n      )\n    )\n  }\n\n  // function to remove an event\n  const removeEvent = eventToBeDeleted => {\n    setEvents(prev =>\n      prev.filter(\n        event =>\n          event.title !== eventToBeDeleted.title ||\n          event.date !== eventToBeDeleted.date ||\n          event.reminderTime !== eventToBeDeleted.reminderTime\n      )\n    )\n  }\n  \n  // function to remove the reminder\n  const removeReminder = reminderToBeRemoved => {\n    setReminders(prev =>\n      prev.filter(reminder => reminder !== reminderToBeRemoved)\n    )\n  }\n\n  // function to snooze a reminder for an event\n  const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n    const utcDateString = new Date(\n      snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000\n    ).toISOString()\n    const reminderTime = remindeTimeString(snoozeTime)\n\n    setEvents(prev =>\n      prev.map(event =>\n        event.title === reminderToBeSnoozed.title &&\n        event.date === reminderToBeSnoozed.date &&\n        event.eventTime === reminderToBeSnoozed.eventTime\n          ? {\n              ...event,\n              reminderTime: reminderTime,\n              reminderFullDate: utcDateString\n            }\n          : event\n      )\n    )\n\n    setReminders(prev =>\n      prev.filter(reminder => reminder !== reminderToBeSnoozed)\n    )\n  }\n\n  return (\n    <div className='App'>\n      <ToastContainer />\n      <Calender\n        className='modal-content'\n        startingDate={new Date()}\n        eventsArr={events}\n        addEvent={addEvent}\n        editEvent={editEvent}\n        removeEvent={removeEvent}\n        remindersArr={reminders}\n        removeReminder={removeReminder}\n        snoozeForReminder={snoozeReminder}\n      />\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}