{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pca158\\\\Downloads\\\\reacteventcalenderwithnotifications-main\\\\reacteventcalenderwithnotifications-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nimport './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const storedEvents = localStorage.getItem('events');\n  const storedReminders = localStorage.getItem('reminders');\n  const [events, setEvents] = useState(storedEvents ? JSON.parse(storedEvents) : MockEvents);\n  const [reminders, setReminders] = useState(storedReminders ? JSON.parse(storedReminders) : Reminders);\n\n  // function to convert a dateString into the date object \n  const getDateFromString = dateString => {\n    const year = parseInt(dateString.slice(0, 4));\n    const month = parseInt(dateString.slice(5, 7) - 1);\n    const day = parseInt(dateString.slice(8, 10));\n    const hours = parseInt(dateString.slice(11, 13));\n    const minutes = parseInt(dateString.slice(14, 16));\n    return new Date(year, month, day, hours, minutes);\n  };\n\n  // useEffect hook to update events in localstorage and also to setreminders\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const intervals = []; // Array to store the setInterval identifiers\n\n    events.forEach(event => {\n      const reminderFullDate = getDateFromString(event.reminderFullDate);\n      const eventFullDate = getDateFromString(event.eventFullDate);\n      const reminderFullDateUtcString = new Date(reminderFullDate.getTime() - reminderFullDate.getTimezoneOffset() * 60000).toISOString();\n      const eventFullDateUtcString = new Date(eventFullDate.getTime() - eventFullDate.getTimezoneOffset() * 60000).toISOString();\n      if (reminderFullDate > new Date()) {\n        const checkInterval = setInterval(() => {\n          const timeRemaining = reminderFullDate.getTime() - Date.now();\n          if (timeRemaining <= 0) {\n            clearInterval(checkInterval);\n            toast.info(\"Reminder for the event '\" + event.title + \"'\");\n            setReminders(prev => [...prev, {\n              title: event.title,\n              remainingTime: eventFullDate.getTime() - Date.now(),\n              date: event.date,\n              eventTime: event.eventTime,\n              reminderFullDate: reminderFullDateUtcString,\n              eventFullDate: eventFullDateUtcString\n            }]);\n          }\n        }, 1000); // Interval time in milliseconds\n\n        intervals.push(checkInterval);\n      }\n    });\n\n    // Cleanup function to clear any remaining intervals\n    return () => {\n      intervals.forEach(intervalId => clearInterval(intervalId));\n    };\n  }, [events]);\n\n  // useEffect hook to update the reminders in the localstorage when they are updated \n  useEffect(() => {\n    localStorage.setItem('reminders', JSON.stringify(reminders));\n  }, [reminders]);\n\n  // useEffect hook to update the remaining time in the reminders eve\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setReminders(prev => {\n        const updatedReminders = prev.map(reminder => {\n          const eventFullDate = getDateFromString(reminder.eventFullDate);\n          const remainingTime = eventFullDate.getTime() - Date.now();\n          return remainingTime <= 0 ? null : {\n            ...reminder,\n            remainingTime\n          };\n        }).filter(reminder => reminder !== null); // Filter out null reminders\n\n        return updatedReminders;\n      });\n    }, 60000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  // function to get the utcDateString, utcReminderDateString and eventTime \n  const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n    const utcDateString = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())).toISOString();\n    // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n    const utcReminderDateString = new Date(reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000).toISOString();\n    const [eventHours, eventMinutes] = data.eventTime.split(\":\").map(Number);\n    const eventTime = new Date(Date.UTC(parseInt(utcDateString.slice(0, 4)),\n    // Year\n    parseInt(utcDateString.slice(5, 7)) - 1,\n    // Month (0-based)\n    parseInt(utcDateString.slice(8, 10)) // Day\n    ));\n\n    eventTime.setUTCHours(eventHours);\n    eventTime.setUTCMinutes(eventMinutes);\n    return [utcDateString, utcReminderDateString, eventTime];\n  };\n\n  // This function will return the reminderDateTime in the hh:mm string format \n  const remindeTimeString = reminderTimeDate => {\n    const hours = reminderTimeDate.getHours().toString().padStart(2, '0');\n    const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0');\n    const reminderTime = `${hours}:${minutes}`;\n    return reminderTime;\n  };\n\n  // function to add an event \n  const addEvent = (data, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, data, reminderTimeDate);\n    const reminderTime = remindeTimeString(reminderTimeDate);\n    setEvents(prev => [...prev, {\n      date: utcDateString,\n      title: data.title,\n      desc: data.desc,\n      eventTime: data.eventTime,\n      reminderTime: reminderTime,\n      reminderFullDate: utcReminderDateString,\n      eventFullDate: eventTime.toISOString(),\n      color: data.color\n    }]);\n  };\n\n  // function to edit event \n  const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, newData, reminderTimeDate);\n    const reminderTime = remindeTimeString(reminderTimeDate);\n    setEvents(prev => prev.map(event => event === eventToBeEdited ? {\n      ...event,\n      title: newData.title,\n      desc: newData.desc,\n      eventTime: newData.eventTime,\n      reminderTime: reminderTime,\n      reminderFullDate: utcReminderDateString,\n      eventFullDate: eventTime.toISOString(),\n      color: newData.color\n    } : event));\n  };\n\n  // function to remove an event \n  const removeEvent = eventToBeDeleted => {\n    setEvents(prev => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n  };\n\n  // function to remove the reminder \n  const removeReminder = reminderToBeRemoved => {\n    setReminders(prev => prev.filter(reminder => reminder !== reminderToBeRemoved));\n  };\n\n  // function to snooze a reminder for an event \n  const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n    const utcDateString = new Date(snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000).toISOString();\n    const reminderTime = remindeTimeString(snoozeTime);\n    setEvents(prev => prev.map(event => event.title === reminderToBeSnoozed.title && event.date === reminderToBeSnoozed.date && event.eventTime === reminderToBeSnoozed.eventTime ? {\n      ...event,\n      reminderTime: reminderTime,\n      reminderFullDate: utcDateString\n    } : event));\n    setReminders(prev => prev.filter(reminder => reminder !== reminderToBeSnoozed));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calender, {\n      className: \"modal-content\",\n      startingDate: new Date(),\n      eventsArr: events,\n      addEvent: addEvent,\n      editEvent: editEvent,\n      removeEvent: removeEvent,\n      remindersArr: reminders,\n      removeReminder: removeReminder,\n      snoozeForReminder: snoozeReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uPu41fKmGelvuj00TUIvtWmy5C8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","App","_s","storedEvents","localStorage","getItem","storedReminders","events","setEvents","useState","JSON","parse","MockEvents","reminders","setReminders","Reminders","getDateFromString","dateString","year","parseInt","slice","month","day","hours","minutes","Date","useEffect","setItem","stringify","intervals","forEach","event","reminderFullDate","eventFullDate","reminderFullDateUtcString","getTime","getTimezoneOffset","toISOString","eventFullDateUtcString","checkInterval","setInterval","timeRemaining","now","clearInterval","toast","info","title","prev","remainingTime","date","eventTime","push","intervalId","interval","updatedReminders","map","reminder","filter","getRemdAndEventTime","data","reminderTimeDate","utcDateString","UTC","getFullYear","getMonth","getDate","utcReminderDateString","eventHours","eventMinutes","split","Number","setUTCHours","setUTCMinutes","remindeTimeString","getHours","toString","padStart","getMinutes","reminderTime","addEvent","desc","color","editEvent","eventToBeEdited","newData","removeEvent","eventToBeDeleted","removeReminder","reminderToBeRemoved","snoozeReminder","reminderToBeSnoozed","snoozeTime","className","children","ToastContainer","fileName","_jsxFileName","lineNumber","columnNumber","Calender","startingDate","eventsArr","remindersArr","snoozeForReminder","_c","$RefreshReg$"],"sources":["C:/Users/pca158/Downloads/reacteventcalenderwithnotifications-main/reacteventcalenderwithnotifications-main/src/App.js"],"sourcesContent":["// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\n// import './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function App() {\n//   const [events, setEvents] = useState(() => {\n//     const storedEvents = localStorage.getItem('events');\n//     return storedEvents ? JSON.parse(storedEvents) : MockEvents;\n//   });\n\n//   useEffect(() => {\n//     localStorage.setItem('events', JSON.stringify(events));\n//     const timeouts = [];\n\n//     // events.forEach((event) => {\n//     //   const [hours, minutes] = (event.reminderTime ?? \"\").split(\":\").map(Number);\n\n//     //   if (event.date) {\n//     //     const reminderTime = new Date(\n//     //       parseInt(event.date.slice(0, 4)),\n//     //       parseInt(event.date.slice(5, 7)) - 1,\n//     //       parseInt(event.date.slice(8, 10))\n//     //     );\n//     //     reminderTime.setHours(hours);\n//     //     reminderTime.setMinutes(minutes);\n\n//     //     if (reminderTime > new Date()) {\n//     //       const timeUntilEvent = reminderTime.getTime() - Date.now();\n\n//     //       const timeoutId = setTimeout(() => {\n//     //         toast.info(event.title + \"\\nReminder\");\n//     //         const index = timeouts.indexOf(timeoutId);\n//     //         if (index > -1) {\n//     //           timeouts.splice(index, 1);\n//     //         }\n//     //       }, timeUntilEvent);\n\n//     //       timeouts.push(timeoutId);\n//     //     }\n//     //   }\n//     // });\n\n//     // return () => {\n//     //   timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n//     // };\n//   }, [events]);\n\n//   const addEvent = (data, date) => {\n//     const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n//     setEvents((prev) => [...prev, { date: utcDate.toISOString(), title: data.title, desc: data.desc, reminderTime: data.reminderTime }]);\n//   };\n\n//   const editEvent = (eventToBeEdited, newData) => {\n//     setEvents((prev) =>\n//       prev.map((event) =>\n//         event === eventToBeEdited\n//           ? { ...event, title: newData.title, desc: newData.desc, reminderTime: newData.reminderTime }\n//           : event\n//       )\n//     );\n//   };\n\n//   const removeEvent = (eventToBeDeleted) => {\n//     setEvents((prev) => prev.filter(event => event.title !== eventToBeDeleted.title || event.date !== eventToBeDeleted.date || event.reminderTime !== eventToBeDeleted.reminderTime));\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ToastContainer />\n//       <Calender startingDate={new Date()} eventsArr={events} addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} />\n//     </div>\n//   );\n// }\n\n// export default App;\nimport './App.css';\n// import { Calender } from './Calender/calender';\n// import { MockEvents } from './Calender/const';\n// import { useState, useEffect } from 'react';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const storedEvents = localStorage.getItem('events');\n  const storedReminders = localStorage.getItem('reminders');\n\n  const [events, setEvents] = useState(storedEvents ? JSON.parse(storedEvents) : MockEvents);\n\n  const [reminders, setReminders] = useState(storedReminders ? JSON.parse(storedReminders) : Reminders);\n\n  // function to convert a dateString into the date object \n  const getDateFromString = (dateString) => {\n    const year = parseInt(dateString.slice(0, 4));\n    const month = parseInt(dateString.slice(5, 7) - 1);\n    const day = parseInt(dateString.slice(8, 10));\n    const hours = parseInt(dateString.slice(11, 13));\n    const minutes = parseInt(dateString.slice(14, 16));\n\n    return new Date(year, month, day, hours, minutes);\n  }\n\n  // useEffect hook to update events in localstorage and also to setreminders\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n    const intervals = []; // Array to store the setInterval identifiers\n\n    events.forEach((event) => {\n      const reminderFullDate = getDateFromString(event.reminderFullDate);\n      const eventFullDate = getDateFromString(event.eventFullDate);\n      const reminderFullDateUtcString = new Date(reminderFullDate.getTime() - reminderFullDate.getTimezoneOffset() * 60000).toISOString();\n      const eventFullDateUtcString = new Date(eventFullDate.getTime() - eventFullDate.getTimezoneOffset() * 60000).toISOString();\n\n      if (reminderFullDate > new Date()) {\n        const checkInterval = setInterval(() => {\n          const timeRemaining = reminderFullDate.getTime() - Date.now();\n          if (timeRemaining <= 0) {\n            clearInterval(checkInterval);\n            toast.info(\"Reminder for the event '\" + event.title + \"'\");\n            setReminders(prev => [...prev, { title: event.title, remainingTime: eventFullDate.getTime() - Date.now(), date: event.date, eventTime: event.eventTime, reminderFullDate: reminderFullDateUtcString, eventFullDate: eventFullDateUtcString }]);\n          }\n        }, 1000); // Interval time in milliseconds\n\n        intervals.push(checkInterval);\n      }\n    });\n\n    // Cleanup function to clear any remaining intervals\n    return () => {\n      intervals.forEach((intervalId) => clearInterval(intervalId));\n    };\n  }, [events]);\n\n  // useEffect hook to update the reminders in the localstorage when they are updated \n  useEffect(() => {\n    localStorage.setItem('reminders', JSON.stringify(reminders));\n  }, [reminders]);\n\n  // useEffect hook to update the remaining time in the reminders eve\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setReminders(prev => {\n        const updatedReminders = prev.map(reminder => {\n          const eventFullDate = getDateFromString(reminder.eventFullDate);\n          const remainingTime = eventFullDate.getTime() - Date.now();\n\n          return (remainingTime <= 0 ? null : { ...reminder, remainingTime });\n\n        }).filter(reminder => reminder !== null); // Filter out null reminders\n\n        return updatedReminders;\n      });\n    }, 60000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  // function to get the utcDateString, utcReminderDateString and eventTime \n  const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n    const utcDateString = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())).toISOString();\n    // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n    const utcReminderDateString = new Date(reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000).toISOString();\n    const [eventHours, eventMinutes] = data.eventTime.split(\":\").map(Number);\n    const eventTime = new Date(Date.UTC(\n      parseInt(utcDateString.slice(0, 4)),   // Year\n      parseInt(utcDateString.slice(5, 7)) - 1,   // Month (0-based)\n      parseInt(utcDateString.slice(8, 10)),  // Day\n    ));\n    eventTime.setUTCHours(eventHours);\n    eventTime.setUTCMinutes(eventMinutes);\n\n    return [utcDateString, utcReminderDateString, eventTime]\n  }\n\n  // This function will return the reminderDateTime in the hh:mm string format \n  const remindeTimeString = (reminderTimeDate) => {\n    const hours = reminderTimeDate.getHours().toString().padStart(2, '0');\n    const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0');\n    const reminderTime = `${hours}:${minutes}`;\n\n    return reminderTime;\n  }\n\n  // function to add an event \n  const addEvent = (data, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, data, reminderTimeDate);\n    const reminderTime = remindeTimeString(reminderTimeDate);\n\n    setEvents(prev => [...prev,\n    {\n      date: utcDateString,\n      title: data.title,\n      desc: data.desc,\n      eventTime: data.eventTime,\n      reminderTime: reminderTime,\n      reminderFullDate: utcReminderDateString,\n      eventFullDate: eventTime.toISOString(),\n      color: data.color\n    }]);\n  }\n\n  // function to edit event \n  const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] = getRemdAndEventTime(date, newData, reminderTimeDate);\n    const reminderTime = remindeTimeString(reminderTimeDate);\n\n    setEvents((prev) =>\n      prev.map((event) =>\n        event === eventToBeEdited\n          ? {\n            ...event,\n            title: newData.title,\n            desc: newData.desc,\n            eventTime: newData.eventTime,\n            reminderTime: reminderTime,\n            reminderFullDate: utcReminderDateString,\n            eventFullDate: eventTime.toISOString(),\n            color: newData.color\n          } : event\n      )\n    );\n  }\n\n  // function to remove an event \n  const removeEvent = (eventToBeDeleted) => {\n    setEvents(prev => prev.filter(event =>\n      event.title !== eventToBeDeleted.title ||\n      event.date !== eventToBeDeleted.date ||\n      event.reminderTime !== eventToBeDeleted.reminderTime\n    ));\n  };\n\n  // function to remove the reminder \n  const removeReminder = (reminderToBeRemoved) => {\n    setReminders(prev => prev.filter(reminder => reminder !== reminderToBeRemoved))\n  }\n\n  // function to snooze a reminder for an event \n  const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n    const utcDateString = new Date(snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000).toISOString();\n    const reminderTime = remindeTimeString(snoozeTime);\n    \n    setEvents((prev) =>\n      prev.map((event) =>\n        event.title === reminderToBeSnoozed.title &&\n          event.date === reminderToBeSnoozed.date &&\n          event.eventTime === reminderToBeSnoozed.eventTime\n          ? { ...event, reminderTime: reminderTime, reminderFullDate: utcDateString }\n          : event\n      )\n    );\n\n    setReminders(prev => prev.filter(reminder => reminder !== reminderToBeSnoozed));\n  }\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <Calender className=\"modal-content\"\n        startingDate={new Date()}\n        eventsArr={events}\n        addEvent={addEvent}\n        editEvent={editEvent}\n        removeEvent={removeEvent}\n        remindersArr={reminders}\n        removeReminder={removeReminder}\n        snoozeForReminder={snoozeReminder}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,WAAW;AAClB;AACA;AACA;AACA;AACA;AAAA,SAAAA,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EACnD,MAAMC,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAEzD,MAAM,CAACE,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAACN,YAAY,GAAGO,IAAI,CAACC,KAAK,CAACR,YAAY,CAAC,GAAGS,UAAU,CAAC;EAE1F,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAACH,eAAe,GAAGI,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,GAAGS,SAAS,CAAC;;EAErG;EACA,MAAMC,iBAAiB,GAAIC,UAAU,IAAK;IACxC,MAAMC,IAAI,GAAGC,QAAQ,CAACF,UAAU,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}