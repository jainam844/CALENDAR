[{"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\index.js":"1","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\reportWebVitals.js":"2","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\App.js":"3","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\const.js":"4","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\calender.js":"5","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\styled.js":"6","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\util.js":"7","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\addEventModal\\addEventModal.js":"8"},{"size":535,"mtime":1685334620556,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1685334620588,"results":"11","hashOfConfig":"10"},{"size":8392,"mtime":1685595821876,"results":"12","hashOfConfig":"10"},{"size":859,"mtime":1685507782301,"results":"13","hashOfConfig":"10"},{"size":17286,"mtime":1685609998542,"results":"14","hashOfConfig":"10"},{"size":1264,"mtime":1685610792359,"results":"15","hashOfConfig":"10"},{"size":1450,"mtime":1685361979064,"results":"16","hashOfConfig":"10"},{"size":792,"mtime":1685334620776,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"y4sh7c",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\index.js",[],[],[],"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\reportWebVitals.js",[],[],"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\App.js",["44"],[],"\nimport './App.css'\nimport { Calender } from './Calender/calender'\nimport { MockEvents, Reminders } from './Calender/const'\nimport { useState, useEffect } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nfunction App () {\n  const storedEvents = localStorage.getItem('events')\n  const storedReminders = localStorage.getItem('reminders')\n\n  const [events, setEvents] = useState(\n    storedEvents ? JSON.parse(storedEvents) : MockEvents\n  )\n\n  const [reminders, setReminders] = useState(\n    storedReminders ? JSON.parse(storedReminders) : Reminders\n  )\n\n  // function to convert a dateString into the date object\n  const getDateFromString = dateString => {\n    const year = parseInt(dateString.slice(0, 4))\n    const month = parseInt(dateString.slice(5, 7) - 1)\n    const day = parseInt(dateString.slice(8, 10))\n    const hours = parseInt(dateString.slice(11, 13))\n    const minutes = parseInt(dateString.slice(14, 16))\n\n    return new Date(year, month, day, hours, minutes)\n  }\n\n  // useEffect hook to update events in localstorage and also to setreminders\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events))\n    const intervals = []\n\n    events.forEach(event => {\n      const reminderFullDate = event.reminderFullDate?.trim() // Add optional chaining operator here\n      const eventFullDate = event.eventFullDate?.trim() // Add optional chaining operator here\n\n      if (reminderFullDate && eventFullDate) {\n        // Check if values are defined\n        const reminderFullDateObj = getDateFromString(reminderFullDate)\n        const eventFullDateObj = getDateFromString(eventFullDate)\n        const reminderFullDateUtcString = new Date(\n          reminderFullDateObj.getTime() -\n            reminderFullDateObj.getTimezoneOffset() * 60000\n        ).toISOString()\n        const eventFullDateUtcString = new Date(\n          eventFullDateObj.getTime() -\n            eventFullDateObj.getTimezoneOffset() * 60000\n        ).toISOString()\n\n        if (reminderFullDateObj > new Date()) {\n          const checkInterval = setInterval(() => {\n            const timeRemaining = reminderFullDateObj.getTime() - Date.now()\n            if (timeRemaining <= 0) {\n              clearInterval(checkInterval)\n              toast.info(\"Reminder for the event '\" + event.title + \"'\")\n              setReminders(prev => [\n                ...prev,\n                {\n                  title: event.title,\n                  remainingTime: eventFullDateObj.getTime() - Date.now(),\n                  date: event.date,\n                  eventTime: event.eventTime,\n                  reminderFullDate: reminderFullDateUtcString,\n                  eventFullDate: eventFullDateUtcString\n                }\n              ])\n            }\n          }, 1000)\n\n          intervals.push(checkInterval)\n        }\n      }\n    })\n\n    return () => {\n      intervals.forEach(intervalId => clearInterval(intervalId))\n    }\n  }, [events])\n\n  // Cleanup function to clear any remaining intervals\n\n  // useEffect hook to update the reminders in the localstorage when they are updated\n  useEffect(() => {\n    localStorage.setItem('reminders', JSON.stringify(reminders))\n  }, [reminders])\n\n  // useEffect hook to update the remaining time in the reminders eve\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setReminders(prev => {\n        const updatedReminders = prev\n          .map(reminder => {\n            const eventFullDate = getDateFromString(reminder.eventFullDate)\n            const remainingTime = eventFullDate.getTime() - Date.now()\n\n            return remainingTime <= 0 ? null : { ...reminder, remainingTime }\n          })\n          .filter(reminder => reminder !== null) // Filter out null reminders\n\n        return updatedReminders\n      })\n    }, 60000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  // function to get the utcDateString, utcReminderDateString and eventTime\n  const getRemdAndEventTime = (date, data, reminderTimeDate) => {\n    const utcDateString = new Date(\n      Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n    ).toISOString()\n    // const utcReminderDateString = new Date(Date.UTC(reminderTimeDate.getFullYear(), reminderTimeDate.getMonth(), reminderTimeDate.getDate(), reminderTimeDate.getHours(), reminderTimeDate.getMinutes())).toISOString();\n    const utcReminderDateString = new Date(\n      reminderTimeDate.getTime() - reminderTimeDate.getTimezoneOffset() * 60000\n    ).toISOString()\n    const [eventHours, eventMinutes] = data.eventTime.split(':').map(Number)\n    const eventTime = new Date(\n      Date.UTC(\n        parseInt(utcDateString.slice(0, 4)), // Year\n        parseInt(utcDateString.slice(5, 7)) - 1, // Month (0-based)\n        parseInt(utcDateString.slice(8, 10)) // Day\n      )\n    )\n    eventTime.setUTCHours(eventHours)\n    eventTime.setUTCMinutes(eventMinutes)\n\n    return [utcDateString, utcReminderDateString, eventTime]\n  }\n\n  // This function will return the reminderDateTime in the hh:mm string format\n  const remindeTimeString = reminderTimeDate => {\n    const hours = reminderTimeDate.getHours().toString().padStart(2, '0')\n    const minutes = reminderTimeDate.getMinutes().toString().padStart(2, '0')\n    const reminderTime = `${hours}:${minutes}`\n\n    return reminderTime\n  }\n\n  // function to add an event\n  const addEvent = (data, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] =\n      getRemdAndEventTime(date, data, reminderTimeDate)\n    const reminderTime = remindeTimeString(reminderTimeDate)\n\n    setEvents(prev => [\n      ...prev,\n      {\n        date: utcDateString,\n        title: data.title,\n        desc: data.desc,\n        eventTime: data.eventTime,\n        reminderTime: reminderTime,\n        reminderFullDate: utcReminderDateString,\n        eventFullDate: eventTime.toISOString(),\n        color: data.color\n      }\n    ])\n  }\n\n  // function to edit event\n  const editEvent = (eventToBeEdited, newData, date, reminderTimeDate) => {\n    const [utcDateString, utcReminderDateString, eventTime] =\n      getRemdAndEventTime(date, newData, reminderTimeDate)\n    const reminderTime = remindeTimeString(reminderTimeDate)\n\n    setEvents(prev =>\n      prev.map(event =>\n        event === eventToBeEdited\n          ? {\n              ...event,\n              title: newData.title,\n              desc: newData.desc,\n              eventTime: newData.eventTime,\n              reminderTime: reminderTime,\n              reminderFullDate: utcReminderDateString,\n              eventFullDate: eventTime.toISOString(),\n              color: newData.color\n            }\n          : event\n      )\n    )\n  }\n\n  // function to remove an event\n  const removeEvent = (eventToBeDeleted) => {\n    setEvents(prev => prev.filter(event =>\n      event.title !== eventToBeDeleted.title ||\n      event.date !== eventToBeDeleted.date ||\n      event.reminderTime !== eventToBeDeleted.reminderTime\n    ));\n  };\n  \n  // function to remove the reminder\n  const removeReminder = reminderToBeRemoved => {\n    setReminders(prev =>\n      prev.filter(reminder => reminder !== reminderToBeRemoved)\n    )\n  }\n\n  // function to snooze a reminder for an event\n  const snoozeReminder = (reminderToBeSnoozed, snoozeTime) => {\n    const utcDateString = new Date(\n      snoozeTime.getTime() - snoozeTime.getTimezoneOffset() * 60000\n    ).toISOString()\n    const reminderTime = remindeTimeString(snoozeTime)\n\n    setEvents(prev =>\n      prev.map(event =>\n        event.title === reminderToBeSnoozed.title &&\n        event.date === reminderToBeSnoozed.date &&\n        event.eventTime === reminderToBeSnoozed.eventTime\n          ? {\n              ...event,\n              reminderTime: reminderTime,\n              reminderFullDate: utcDateString\n            }\n          : event\n      )\n    )\n\n    setReminders(prev =>\n      prev.filter(reminder => reminder !== reminderToBeSnoozed)\n    )\n  }\n\n  return (\n    <div className='App'>\n      <ToastContainer />\n      <Calender\n        className='modal-content'\n        startingDate={new Date()}\n        eventsArr={events}\n        addEvent={addEvent}\n        editEvent={editEvent}\n        removeEvent={removeEvent}\n        remindersArr={reminders}\n        removeReminder={removeReminder}\n        snoozeForReminder={snoozeReminder}\n      />\n    </div>\n  )\n}\n\nexport default App\n","C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\const.js",[],[],"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\calender.js",["45","46","47","48","49"],[],"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\styled.js",[],[],"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\util.js",[],[],"C:\\Users\\pca158\\Downloads\\reacteventcalenderwithnotifications-main\\reacteventcalenderwithnotifications-main\\src\\Calender\\addEventModal\\addEventModal.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":168,"column":12,"nodeType":"52","messageId":"53","endLine":168,"endColumn":25},{"ruleId":"50","severity":1,"message":"54","line":12,"column":10,"nodeType":"52","messageId":"53","endLine":12,"endColumn":14},{"ruleId":"50","severity":1,"message":"55","line":20,"column":20,"nodeType":"52","messageId":"53","endLine":20,"endColumn":29},{"ruleId":"50","severity":1,"message":"56","line":21,"column":10,"nodeType":"52","messageId":"53","endLine":21,"endColumn":20},{"ruleId":"50","severity":1,"message":"57","line":23,"column":10,"nodeType":"52","messageId":"53","endLine":23,"endColumn":24},{"ruleId":"58","severity":1,"message":"59","line":179,"column":19,"nodeType":"60","messageId":"61","endLine":179,"endColumn":21},"no-unused-vars","'utcDateString' is assigned a value but never used.","Identifier","unusedVar","'Days' is defined but never used.","'useEffect' is defined but never used.","'EventModal' is defined but never used.","'ToastContainer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]